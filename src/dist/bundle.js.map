{"version":3,"file":"bundle.js","sources":["../../node_modules/tslib/tslib.es6.js","../prng.ts","../types.ts","../dungeon/gen_data.ts","../generator.ts","../canvas.ts","../dungeon.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","// prng.ts (1-48)\r\n'use strict';\r\n\r\ninterface CustomWindow extends Window {\r\n    set_prng_seed?: (a: number | string) => number;\r\n    random?: (a: number) => number;\r\n    random_fp?: () => number;\r\n}\r\n\r\nconst prng = ((c: CustomWindow, callback: (arg0: CustomWindow, arg1: any) => void): {\r\n    set_prng_seed: (a: number | string) => number;\r\n    random: (a: number) => number;\r\n    random_fp: () => number\r\n} => {\r\n    let b = Date.now();\r\n\r\n    function e(a: number): number {\r\n        b = 1103515245 * b + 12345;\r\n        b &= 2147483647;\r\n        return a > 1 ? (b >> 8) % a : 0;\r\n    }\r\n\r\n    c.set_prng_seed = function (a: number | string): number {\r\n        if (typeof a === 'number') {\r\n            b = Math.floor(a);\r\n        } else if (typeof a === 'string') {\r\n            let d = 42;\r\n            for (let f = 0; f < a.length; f++) {\r\n                d = (d << 5) - d + a.charCodeAt(f);\r\n                d &= 2147483647;\r\n            }\r\n            b = d;\r\n        } else {\r\n            b = Date.now();\r\n        }\r\n        return b;\r\n    };\r\n\r\n    c.random = e;\r\n    c.random_fp = function (): number {\r\n        return e(32768) / 32768;\r\n    };\r\n\r\n    // Return the functions you want to export\r\n    return {\r\n        set_prng_seed: c.set_prng_seed,\r\n        random: c.random,\r\n        random_fp: c.random_fp\r\n    };\r\n})(window as unknown as CustomWindow, () => { });\r\n\r\n// Named exports\r\nexport const set_prng_seed = prng.set_prng_seed;\r\nexport const random = prng.random;\r\nexport const random_fp = prng.random_fp;","\r\n// Define a new interface for stair objects\r\nexport interface Stair {\r\n    row: number;\r\n    col: number;\r\n    next_row: number;\r\n    next_col: number;\r\n    key?: 'up' | 'down';\r\n}\r\n\r\n// Define an interface for door objects\r\nexport interface Door {\r\n    row: number;\r\n    col: number;\r\n    key: string;\r\n    type: string;\r\n    out_id?: number;\r\n    desc?: string;\r\n}\r\n\r\nexport interface DoorDetails {\r\n    arch?: number;\r\n    door?: number;\r\n    trap?: number;\r\n    lock?: number;\r\n    wall?: number;\r\n}\r\n\r\nexport interface DoorPosition {\r\n    door_r: number; // Equivalent to door_r\r\n    door_c: number; // Equivalent to door_c\r\n    sill_r?: number;       // Sill row\r\n    sill_c?: number;       // Sill column\r\n    dir?: string;          // Direction (north, south, west, east)\r\n    out_id?: number;      // Optional: Connected room ID\r\n    door_type?: string;   // Optional: Door type (e.g., 'Standard')\r\n}\r\n\r\n// Define an interface for room objects\r\nexport interface Room {\r\n    id: number;\r\n    size: string;\r\n    row: number;\r\n    col: number;\r\n    north: number;\r\n    south: number;\r\n    west: number;\r\n    east: number;\r\n    height: number;\r\n    width: number;\r\n    door: { [key: string]: Door[] }; // Doors are grouped by direction\r\n    last_door?: Door; // Optional property for last_door\r\n    complex?: Room[]; // Optional property for complex rooms\r\n}\r\n\r\nexport interface RoomConfig {\r\n    size?: string; // Optional: Room size (e.g., 'medium')\r\n    i?: number;    // Optional: Row index\r\n    j?: number;    // Optional: Column index\r\n    height?: number; // Optional: Room height\r\n    width?: number;  // Optional: Room width\r\n    complex_id?: number; // Optional: Complex room ID\r\n    huge_rooms?: boolean; // Optional huge flag\r\n}\r\n\r\n// Add only the properties that are actually used in the JS version\r\nexport interface DungeonData {\r\n    seed: number;\r\n    cell: number[][];\r\n    n_rooms: number;\r\n    room: { [key: number]: Room };\r\n    n_cols: number;\r\n    n_rows: number;\r\n    max_col: number;\r\n    max_row: number;\r\n    cell_size: number;\r\n    door_type: string;\r\n    n_i: number;\r\n    n_j: number;\r\n    base_layer: any;\r\n}\r\n\r\nexport const V: { [key: string]: { colors: { [key: string]: string } } } = {\r\n    standard: { colors: { fill: '#000000', open: '#ffffff', open_grid: '#cccccc' } },\r\n    classic: { colors: { fill: '#3399cc', open: '#ffffff', open_grid: '#3399cc', hover: '#b6def2' } },\r\n    graph: { colors: { fill: '#ffffff', open: '#ffffff', grid: '#c9ebf5', wall: '#666666', wall_shading: '#666666', door: '#333333', label: '#333333', tag: '#666666' } }\r\n};\r\n\r\nexport interface DungeonRenderSettings {\r\n    cell_size: number; // Size of each cell in pixels\r\n    palette: {\r\n        fill: string; // Background color\r\n        open: string; // Open space color\r\n        grid: string; // Grid color\r\n        wall: string; // Wall color\r\n        door: string; // Door color\r\n        stair: string; // Stair color\r\n        label: string; // Label color\r\n        // Add more colors as needed\r\n    };\r\n    font: string; // Font for labels (e.g., \"12px sans-serif\")\r\n    grid: boolean; // Whether to draw the grid\r\n    base_layer: HTMLCanvasElement; // The base layer canvas\r\n    max_x: number; // Maximum x-coordinate (canvas width)\r\n    max_y: number; // Maximum y-coordinate (canvas height)\r\n}\r\n\r\nexport interface SettingOption {\r\n    title: string;\r\n    [key: string]: any; // Allows for additional properties like 'aspect', 'size', 'cell', etc.\r\n}\r\n\r\nexport interface DungeonSettingsI {\r\n    map_style: { [key: string]: SettingOption };\r\n    grid: { [key: string]: SettingOption };\r\n    dungeon_layout: { [key: string]: SettingOption };\r\n    dungeon_size: { [key: string]: SettingOption };\r\n    add_stairs: { [key: string]: SettingOption };\r\n    room_layout: { [key: string]: SettingOption };\r\n    room_size: { [key: string]: SettingOption };\r\n    doors: { [key: string]: SettingOption };\r\n    corridor_layout: { [key: string]: SettingOption };\r\n    remove_deadends: { [key: string]: SettingOption };\r\n}\r\n\r\nexport const DungeonSettings: DungeonSettingsI = {\r\n    map_style: {\r\n        standard: { title: \"Standard\" },\r\n        classic: { title: \"Classic\" },\r\n        graph: { title: \"GraphPaper\" },\r\n    },\r\n    grid: {\r\n        none: { title: \"None\" },\r\n        square: { title: \"Square\" },\r\n        hex: { title: \"Hex\" },\r\n        vex: { title: \"VertHex\" },\r\n    },\r\n    dungeon_layout: {\r\n        square: { title: \"Square\", aspect: 1 },\r\n        rectangle: { title: \"Rectangle\", aspect: 1.3 },\r\n        box: {\r\n            title: \"Box\",\r\n            aspect: 1,\r\n            mask: [\r\n                [1, 1, 1],\r\n                [1, 0, 1],\r\n                [1, 1, 1],\r\n            ],\r\n        },\r\n        cross: {\r\n            title: \"Cross\",\r\n            aspect: 1,\r\n            mask: [\r\n                [0, 1, 0],\r\n                [1, 1, 1],\r\n                [0, 1, 0],\r\n            ],\r\n        },\r\n        dagger: {\r\n            title: \"Dagger\",\r\n            aspect: 1.3,\r\n            mask: [\r\n                [0, 1, 0],\r\n                [1, 1, 1],\r\n                [0, 1, 0],\r\n                [0, 1, 0],\r\n            ],\r\n        },\r\n        saltire: { title: \"Saltire\", aspect: 1 },\r\n        keep: {\r\n            title: \"Keep\",\r\n            aspect: 1,\r\n            mask: [\r\n                [1, 1, 0, 0, 1, 1],\r\n                [1, 1, 1, 1, 1, 1],\r\n                [0, 1, 1, 1, 1, 0],\r\n                [0, 1, 1, 1, 1, 0],\r\n                [1, 1, 1, 1, 1, 1],\r\n                [1, 1, 0, 0, 1, 1],\r\n            ],\r\n        },\r\n        hexagon: { title: \"Hexagon\", aspect: 0.9 },\r\n        round: { title: \"Round\", aspect: 1 },\r\n    },\r\n    dungeon_size: {\r\n        fine: { title: \"Fine\", size: 200, cell: 18 },\r\n        dimin: { title: \"Diminiutive\", size: 252, cell: 18 },\r\n        tiny: { title: \"Tiny\", size: 318, cell: 18 },\r\n        small: { title: \"Small\", size: 400, cell: 18 },\r\n        medium: { title: \"Medium\", size: 504, cell: 18 },\r\n        large: { title: \"Large\", size: 635, cell: 18 },\r\n        huge: { title: \"Huge\", size: 800, cell: 18 },\r\n        gargant: { title: \"Gargantuan\", size: 1008, cell: 18 },\r\n        colossal: { title: \"Colossal\", size: 1270, cell: 18 },\r\n    },\r\n    add_stairs: {\r\n        no: { title: \"No\" },\r\n        yes: { title: \"Yes\" },\r\n        many: { title: \"Many\" },\r\n    },\r\n    room_layout: {\r\n        sparse: { title: \"Sparse\" },\r\n        scattered: { title: \"Scattered\" },\r\n        dense: { title: \"Dense\" },\r\n    },\r\n    room_size: {\r\n        small: { title: \"Small\", size: 2, radix: 2 },\r\n        medium: { title: \"Medium\", size: 2, radix: 5 },\r\n        large: { title: \"Large\", size: 5, radix: 2 },\r\n        huge: { title: \"Huge\", size: 5, radix: 5, huge: 1 },\r\n        gargant: { title: \"Gargantuan\", size: 8, radix: 5, huge: 1 },\r\n        colossal: { title: \"Colossal\", size: 8, radix: 8, huge: 1 },\r\n    },\r\n    //added to config rather than dynamically like js did\r\n    doors: {\r\n        none: { title: \"None\", table: { '01-15': 65536 } },\r\n        basic: { title: \"Basic\", table: { '01-15': 65536, '16-60': 131072 } },\r\n        secure: { title: \"Secure\", table: { '01-15': 65536, '16-60': 131072, '61-75': 262144 } },\r\n        standard: {\r\n            title: \"Standard\",\r\n            table: {\r\n                '01-15': 65536, '16-60': 131072, '61-75': 262144, '76-90': 524288, '91-100': 1048576,\r\n                '101-110': 2097152\r\n            },\r\n        },\r\n        deathtrap: { title: \"Deathtrap\", table: { '01-15': 65536, '16-30': 524288, '31-40': 1048576 } },\r\n    },\r\n    corridor_layout: {\r\n        labyrinth: { title: \"Labyrinth\", pct: 0 },\r\n        errant: { title: \"Errant\", pct: 50 },\r\n        straight: { title: \"Straight\", pct: 90 },\r\n    },\r\n    remove_deadends: {\r\n        none: { title: \"None\", pct: 0 },\r\n        some: { title: \"Some\", pct: 50 },\r\n        all: { title: \"All\", pct: 100 },\r\n    },\r\n};\r\n\r\nexport interface FObject {\r\n    complex_id: any;\r\n    width: number;\r\n    height: number;\r\n    j: number;\r\n    i: number;\r\n    size?: string | undefined;\r\n}\r\n\r\nexport interface DungeonConfig {\r\n    n_rooms: number;\r\n    room: {\r\n        size: number;\r\n        height: number;\r\n        width: number;\r\n        row: number;\r\n        col: number;\r\n    }[];\r\n}\r\n\r\nexport interface DoorTable {\r\n    [key: string]: number;\r\n}\r\n\r\nexport interface DoorsEntry {\r\n    title: string;\r\n    table: DoorTable;\r\n}\r\n\r\nexport interface Doors {\r\n    none: DoorsEntry;\r\n    basic: DoorsEntry;\r\n    secure: DoorsEntry;\r\n    standard: DoorsEntry;\r\n    deathtrap: DoorsEntry;\r\n}\r\n\r\nexport interface Layout {\r\n    map_style: string | undefined;\r\n    grid: string | undefined;\r\n    font?: string; // Notice the optional property here\r\n}\r\n\r\nexport interface Map {\r\n    map_style: string;\r\n    grid: string;\r\n    dungeon_layout: string;\r\n    dungeon_size: string;\r\n    add_stairs: string;\r\n    room_layout: string;\r\n    room_size: string;\r\n    doors: string;\r\n    corridor_layout: string;\r\n    remove_deadends: string;\r\n}\r\n\r\nexport interface P {\r\n    [key: string]: number;\r\n}\r\n\r\nexport interface M {\r\n    [key: string]: number;\r\n}\r\n\r\nexport type DirectionKey = keyof typeof Direction;\r\n\r\nexport interface EaParams {\r\n    a: DungeonData;\r\n    b: number;\r\n    f: number;\r\n    d?: DirectionKey;\r\n    corridor_layout?: string;\r\n    straight_pct?: number;\r\n}\r\n\r\n// Define the Direction enum\r\n// export enum Direction {\r\n//     north = 0,\r\n//     south = 1,\r\n//     west = 2,\r\n//     east = 3\r\n// }\r\nexport const Direction = {\r\n    north: \"north\",\r\n    south: \"south\",\r\n    west: \"west\",\r\n    east: \"east\"\r\n} as const;\r\n\r\nexport const P: { [key: string]: number } = {\r\n    north: -1,\r\n    south: 1,\r\n    west: 0,\r\n    east: 0\r\n};\r\n\r\nexport const M: { [key: string]: number } = {\r\n    north: 0,\r\n    south: 0,\r\n    west: -1,\r\n    east: 1\r\n};\r\n\r\nexport const Ea = {\r\n    door: 'fill',\r\n    label: 'fill',\r\n    stair: 'wall',\r\n    wall: 'fill',\r\n    fill: 'black',\r\n    tag: 'white',\r\n    open: 'fill',\r\n    open_grid: 'grid',\r\n    hover: 'fill',\r\n    grid: 'fill',\r\n    wall_shading: 'wall' // Add 'wall_shading'\r\n};\r\n\r\nexport interface Palette {\r\n    [key: string]: string | null; // Allow any key with a string or null value\r\n}\r\n\r\nexport type PaletteKey = 'fill' | 'open' | 'open_grid' | 'hover' | 'grid' | 'wall' | 'wall_shading' | 'door' | 'label' | 'stair' | 'tag';\r\n\r\nexport interface GenData {\r\n    [key: string]: string | string[] | GenData;\r\n}\r\nexport interface NameSet {\r\n    [key: string]: string[];\r\n    Draconic: string[];\r\n    Fiendish: string[];\r\n    // Add other keys here if they exist\r\n}\r\nexport const name_set: NameSet = {\r\n    Draconic: [\r\n        \"Abdi\", \"Abiditaan\", \"Abiesuuh\", \"Ammiditana\", \"Ammisaduka\", \"Amurru\", \"Apilsin\", \"Arammadara\", \"Arsaces\", \"Asmadu\", \"Balshazzar\", \"Berossus\", \"Bhhazuum\", \"Burnaburiash\", \"Daad\", \"Ditanu\", \"Gezer\", \"Heana\", \"Ibni\", \"Ilima\", \"Iptiyamuta\", \"Kadashman\", \"Kheba\", \"Maam\", \"Milkilu\", \"Nabonidus\", \"Nabunaid\", \"Nabupolassar\", \"Namhuu\", \"Namzuu\", \"Nebuchadnezzer\", \"Ninus\", \"Ninyas\", \"Obares\", \"Saamsuiluna\", \"Sheshbazzar\", \"Sinmubaliit\", \"Sumalika\", \"Sumula\", \"Suni\", \"Tattenai\", \"Tuubtiyamuta\", \"Yaamkuuzzuhalamma\", \"Zabium\", \"Zuummabu\"\r\n    ],\r\n    Fiendish: [\r\n        \"Abaddon\", \"Abalam\", \"Abraxas\", \"Abyzou\", \"Adramelech\", \"Aeshma\", \"Agares\", \"Ahriman\", \"Akvan\", \"Alloces\", \"Amon\", \"Anamalech\", \"Andhaka\", \"Anzu\", \"Armaros\", \"Asakku\", \"Astaroth\", \"Bael\", \"Balberith\", \"Baphomet\", \"Barbatos\", \"Behemoth\", \"Beleth\", \"Belphegor\", \"Charun\", \"Chemosh\", \"Culsu\", \"Dagon\", \"Drekavac\", \"Eblis\", \"Eligos\", \"Euryale\", \"Focalor\", \"Forneus\", \"Gaderel\", \"Gaki\", \"Gamigin\", \"Glasya\", \"Gomory\", \"Gusoyn\", \"Halphas\", \"Haures\", \"Iblis\", \"Kali\", \"Kasadya\", \"Kimaris\", \"Lamashtu\", \"Lechies\", \"Leraie\", \"Lilith\", \"Malaphar\", \"Malphas\", \"Malthus\", \"Mammon\", \"Mara\", \"Marbas\", \"Maricha\", \"Mastema\", \"Melchiresa\", \"Mephistopheles\", \"Merihem\", \"Moloch\", \"Naberus\", \"Naphula\", \"Ninurta\", \"Oriax\", \"Orobos\", \"Pazuzu\", \"Phenex\", \"Pruslas\", \"Rakshasa\", \"Raum\", \"Rumyal\", \"Saleos\", \"Samael\", \"Semyaz\", \"Shedim\", \"Sthenno\", \"Surgat\", \"Ukobach\", \"Valac\", \"Vapula\", \"Vassago\", \"Vepar\", \"Vephar\", \"Xaphan\", \"Yeterel\", \"Zagan\", \"Zepar\"\r\n    ],\r\n    Gothic: [\r\n        \"Ablabius\", \"Achila\", \"Agila\", \"Agiwulf\", \"Agriwulf\", \"Aidoingus\", \"Aithanarid\", \"Alaric\", \"Alatheus\", \"Alaviv\", \"Alica\", \"Aligern\", \"Alla\", \"Amal\", \"Amalaric\", \"Ammius\", \"Anagastes\", \"Andagis\", \"Anianus\", \"Ansila\", \"Ansis\", \"Aoric\", \"Apahida\", \"Ardabur\", \"Ardaric\", \"Argaith\", \"Ariaric\", \"Arimir\", \"Arius\", \"Arnegliscus\", \"Arvandus\", \"Asbad\", \"Aspar\", \"Ataulf\", \"Ataulph\", \"Athalaric\", \"Athanagild\", \"Athanaric\", \"Atharid\", \"Athaulf\", \"Babai\", \"Badua\", \"Baduila\", \"Baza\", \"Berig\", \"Berimud\", \"Berimund\", \"Bessa\", \"Bessas\", \"Bessi\", \"Beuca\", \"Beucad\", \"Bigelis\", \"Bilimer\", \"Borani\", \"Braga\", \"Brandila\", \"Candac\", \"Cannabas\", \"Cannabaudes\", \"Cethegus\", \"Chindasuinth\", \"Cniva\", \"Cnivida\", \"Colias\", \"Crocus\", \"Cunigast\", \"Cunimund\", \"Cyrila\", \"Dubius\", \"Duda\", \"Ebermud\", \"Eberwolf\", \"Ebrimud\", \"Edica\", \"Eraric\", \"Eriulf\", \"Ermanaric\", \"Ermelandus\", \"Ervig\", \"Euric\", \"Eutharic\", \"Farnobius\", \"Fastida\", \"Feletheus\", \"Feva\", \"Filimer\", \"Flaccitheus\", \"Fravitta\", \"Fredegar\", \"Fretela\", \"Frideric\", \"Fridigern\", \"Frigeridus\", \"Frithila\", \"Fritigern\", \"Gadaric\", \"Gainas\", \"Gaiseric\", \"Galindo\", \"Galindus\", \"Gaut\", \"Gauterit\", \"Geberic\", \"Gelimer\", \"Gento\", \"Gerung\", \"Gesalec\", \"Gesimund\", \"Getica\", \"Goar\", \"Goddas\", \"Godegisel\", \"Godigisclus\", \"Goiaricus\", \"Gouththas\", \"Gundehar\", \"Gundiok\", \"Gundobad\", \"Gunteric\", \"Gunthigis\", \"Gutthikas\", \"Hadubrand\", \"Heldebald\", \"Heldefredus\", \"Heribrand\", \"Hermangild\", \"Hermenigild\", \"Herminafrid\", \"Hernegliscus\", \"Hildebad\", \"Hildebrand\", \"Hilderic\", \"Hilderith\", \"Himnerith\", \"Hisarna\", \"Hulmul\", \"Huml\", \"Huneric\", \"Hunigild\", \"Hunimund\", \"Hunulf\", \"Hunumund\", \"Ibba\", \"Ildebad\", \"Inna\", \"Irnfried\", \"Jordanes\", \"Lagariman\", \"Lampridius\", \"Leovigild\", \"Leuvibild\", \"Livila\", \"Marcomir\", \"Modaharius\", \"Modares\", \"Munderic\", \"Mundo\", \"Namatius\", \"Naulabates\", \"Nidada\", \"Niketas\", \"Odoin\", \"Odotheus\", \"Odovacar\", \"Ostrogotha\", \"Osuin\", \"Ovida\", \"Patza\", \"Radagaisus\", \"Rausimod\", \"Recared\", \"Reccared\", \"Recceswinth\", \"Rechiar\", \"Rechimund\", \"Recitach\", \"Rekitach\", \"Remismund\", \"Respa\", \"Retemeris\", \"Rhima\", \"Ricimer\", \"Rictiovarus\", \"Rikiar\", \"Roderic\", \"Rodolf\", \"Roduulf\", \"Rudesind\", \"Saba\", \"Sadagares\", \"Safrax\", \"Salla\", \"Sangiban\", \"Sansalas\", \"Saphrax\", \"Sarus\", \"Segeric\", \"Selenas\", \"Shapur\", \"Sidimund\", \"Sigeric\", \"Sigesar\", \"Sigibald\", \"Sigismund\", \"Sigisvult\", \"Sindila\", \"Sisbert\", \"Sisebut\", \"Sisenand\", \"Soas\", \"Suatrius\", \"Sueridus\", \"Sunericus\", \"Sunnia\", \"Tanais\", \"Tanca\", \"Teias\", \"Teja\", \"Tharuaro\", \"Thela\", \"Theodahad\", \"Theodehad\", \"Theodemer\", \"Theoderic\", \"Theoderid\", \"Theodoric\", \"Theodulf\", \"Theudegisel\", \"Theudegisklos\", \"Theudis\", \"Thidrek\", \"Thiudimir\", \"Thorismud\", \"Thorismund\", \"Thrasamund\", \"Thrasaric\", \"Thraustila\", \"Totila\", \"Tribigild\", \"Tufa\", \"Tuluin\", \"Ulfilas\", \"Unigild\", \"Unila\", \"Unimund\", \"Uraias\", \"Valamer\", \"Valamir\", \"Valaravans\", \"Valia\", \"Vandalarius\", \"Vandil\", \"Veduco\", \"Vetericus\", \"Vetranio\", \"Videric\", \"Vidigoia\", \"Vidimir\", \"Viliaris\", \"Vinitharius\", \"Visimar\", \"Vithimiris\", \"Vithmiris\", \"Vitigis\", \"Vittamar\", \"Vultuulf\", \"Wala\", \"Walahmar\", \"Wallia\", \"Wamba\", \"Wella\", \"Winguric\", \"Witige\", \"Wittigis\", \"Wittiza\"\r\n    ]\r\n};\r\n\r\nexport interface UserSettings {\r\n    map_style: string;\r\n    grid: string;\r\n    dungeon_layout: string;\r\n    dungeon_size: string;\r\n    add_stairs: string;\r\n    room_layout: string;\r\n    room_size: string;\r\n    doors: string;\r\n    corridor_layout: string;\r\n    remove_deadends: string;\r\n}\r\n\r\nexport const ma = {\r\n    map_style: 'standard', grid: 'square', dungeon_layout: 'rectangle',\r\n    dungeon_size: 'medium', add_stairs: 'yes', room_layout: 'scattered', room_size: 'medium', doors: 'standard', corridor_layout: 'errant', remove_deadends: 'some'\r\n}\r\n\r\nexport interface DirectionDetails {\r\n    walled: [number, number][]; // Cells that are considered walls\r\n    close: [number, number][];  // Cells to close (set to 0)\r\n    recurse: [number, number];  // Offset to recurse into\r\n    corridor: number[][];       // Cells that are part of the corridor\r\n    stair: number[];            // Cells that are part of stairs\r\n    next: [number, number];     // Next cell in the direction\r\n    open?: [number, number];    // Optional: Cells to open (set to 4)\r\n    dir?: string;               // Direction of the stair placement\r\n}\r\n\r\n// Define the DirectionConfig object with all necessary properties\r\nexport const DirectionConfig: Record<string, DirectionDetails> = {\r\n    north: {\r\n        walled: [\r\n            [0, -1],\r\n            [1, -1],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1],\r\n        ],\r\n        close: [[0, 0]],\r\n        recurse: [-1, 0],\r\n        corridor: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [2, 0],\r\n        ],\r\n        stair: [0, 0],\r\n        next: [-1, 0],\r\n        dir: \"north\", // Add the direction\r\n    },\r\n    south: {\r\n        walled: [\r\n            [0, -1],\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, 1],\r\n        ],\r\n        close: [[0, 0]],\r\n        recurse: [1, 0],\r\n        corridor: [\r\n            [0, 0],\r\n            [-1, 0],\r\n            [-2, 0],\r\n        ],\r\n        stair: [0, 0],\r\n        next: [1, 0],\r\n        dir: \"south\", // Add the direction\r\n    },\r\n    west: {\r\n        walled: [\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n        ],\r\n        close: [[0, 0]],\r\n        recurse: [0, -1],\r\n        corridor: [\r\n            [0, 0],\r\n            [0, 1],\r\n            [0, 2],\r\n        ],\r\n        stair: [0, 0],\r\n        next: [0, -1],\r\n        dir: \"west\", // Add the direction\r\n    },\r\n    east: {\r\n        walled: [\r\n            [-1, 0],\r\n            [-1, -1],\r\n            [0, -1],\r\n            [1, -1],\r\n            [1, 0],\r\n        ],\r\n        close: [[0, 0]],\r\n        recurse: [0, 1],\r\n        corridor: [\r\n            [0, 0],\r\n            [0, -1],\r\n            [0, -2],\r\n        ],\r\n        stair: [0, 0],\r\n        next: [0, 1],\r\n        dir: \"east\", // Add the direction\r\n    },\r\n};\r\n\r\nexport type TerrainSettingsNested = {\r\n    title: string;\r\n    [key: string]: any; // Allow additional properties\r\n};\r\n\r\nexport interface TerrainSettingsI {\r\n    map_style: {\r\n        standard: TerrainSettingsNested;\r\n        classic: TerrainSettingsNested;\r\n        graph: TerrainSettingsNested;\r\n    };\r\n    grid: {\r\n        none: TerrainSettingsNested;\r\n        square: TerrainSettingsNested;\r\n        hex: TerrainSettingsNested;\r\n        vex: TerrainSettingsNested;\r\n    };\r\n    dungeon_layout: {\r\n        square: TerrainSettingsNested & { aspect: number };\r\n        rectangle: TerrainSettingsNested & { aspect: number };\r\n        box: TerrainSettingsNested & { aspect: number; mask: number[][] };\r\n        cross: TerrainSettingsNested & { aspect: number; mask: number[][] };\r\n        dagger: TerrainSettingsNested & { aspect: number; mask: number[][] };\r\n        saltire: TerrainSettingsNested & { aspect: number };\r\n        keep: TerrainSettingsNested & { aspect: number; mask: number[][] };\r\n        hexagon: TerrainSettingsNested & { aspect: number };\r\n        round: TerrainSettingsNested & { aspect: number };\r\n    };\r\n    dungeon_size: {\r\n        fine: TerrainSettingsNested & { size: number; cell: number };\r\n        dimin: TerrainSettingsNested & { size: number; cell: number };\r\n        tiny: TerrainSettingsNested & { size: number; cell: number };\r\n        small: TerrainSettingsNested & { size: number; cell: number };\r\n        medium: TerrainSettingsNested & { size: number; cell: number };\r\n        large: TerrainSettingsNested & { size: number; cell: number };\r\n        huge: TerrainSettingsNested & { size: number; cell: number };\r\n        gargant: TerrainSettingsNested & { size: number; cell: number };\r\n        colossal: TerrainSettingsNested & { size: number; cell: number };\r\n    };\r\n    add_stairs: {\r\n        no: TerrainSettingsNested;\r\n        yes: TerrainSettingsNested;\r\n        many: TerrainSettingsNested;\r\n    };\r\n    room_layout: {\r\n        sparse: TerrainSettingsNested;\r\n        scattered: TerrainSettingsNested;\r\n        dense: TerrainSettingsNested;\r\n    };\r\n    room_size: {\r\n        small: TerrainSettingsNested & { size: number; radix: number };\r\n        medium: TerrainSettingsNested & { size: number; radix: number };\r\n        large: TerrainSettingsNested & { size: number; radix: number };\r\n        huge: TerrainSettingsNested & { size: number; radix: number; huge: number };\r\n        gargant: TerrainSettingsNested & { size: number; radix: number; huge: number };\r\n        colossal: TerrainSettingsNested & { size: number; radix: number; huge: number };\r\n    };\r\n    doors: {\r\n        none: TerrainSettingsNested;\r\n        basic: TerrainSettingsNested;\r\n        secure: TerrainSettingsNested;\r\n        standard: TerrainSettingsNested;\r\n        deathtrap: TerrainSettingsNested;\r\n    };\r\n    corridor_layout: {\r\n        labyrinth: TerrainSettingsNested & { pct: number };\r\n        errant: TerrainSettingsNested & { pct: number };\r\n        straight: TerrainSettingsNested & { pct: number };\r\n    };\r\n    remove_deadends: {\r\n        none: TerrainSettingsNested & { pct: number };\r\n        some: TerrainSettingsNested & { pct: number };\r\n        all: TerrainSettingsNested & { pct: number };\r\n    };\r\n}\r\n\r\nexport interface TerrainSettings {\r\n    [topLevelKey: string]: {\r\n        [nestedKey: string]: {\r\n            title: string;\r\n            aspect?: number; // Optional property\r\n            size?: number; // Optional property\r\n            cell?: number; // Optional property\r\n            mask?: number[][]; // Optional property\r\n            pct?: number; // Optional property\r\n            radix?: number; // Optional property\r\n            huge?: boolean; // Optional property, only used in specific cases\r\n        };\r\n    };\r\n}\r\n\r\nexport const TerrainSettingsConfig: TerrainSettings = {\r\n    map_style: {\r\n        standard: { title: 'Standard' },\r\n        classic: { title: 'Classic' },\r\n        graph: { title: 'GraphPaper' },\r\n    },\r\n    grid: {\r\n        none: { title: 'None' },\r\n        square: { title: 'Square' },\r\n        hex: { title: 'Hex' },\r\n        vex: { title: 'VertHex' },\r\n    },\r\n    dungeon_layout: {\r\n        square: { title: 'Square', aspect: 1 },\r\n        rectangle: { title: 'Rectangle', aspect: 1.3 },\r\n        box: {\r\n            title: 'Box',\r\n            aspect: 1,\r\n            mask: [\r\n                [1, 1, 1],\r\n                [1, 0, 1],\r\n                [1, 1, 1],\r\n            ],\r\n        },\r\n        cross: {\r\n            title: 'Cross',\r\n            aspect: 1,\r\n            mask: [\r\n                [0, 1, 0],\r\n                [1, 1, 1],\r\n                [0, 1, 0],\r\n            ],\r\n        },\r\n        dagger: {\r\n            title: 'Dagger',\r\n            aspect: 1.3,\r\n            mask: [\r\n                [0, 1, 0],\r\n                [1, 1, 1],\r\n                [0, 1, 0],\r\n                [0, 1, 0],\r\n            ],\r\n        },\r\n        saltire: { title: 'Saltire', aspect: 1 },\r\n        keep: {\r\n            title: 'Keep',\r\n            aspect: 1,\r\n            mask: [\r\n                [1, 1, 0, 0, 1, 1],\r\n                [1, 1, 1, 1, 1, 1],\r\n                [0, 1, 1, 1, 1, 0],\r\n                [0, 1, 1, 1, 1, 0],\r\n                [1, 1, 1, 1, 1, 1],\r\n                [1, 1, 0, 0, 1, 1],\r\n            ],\r\n        },\r\n        hexagon: { title: 'Hexagon', aspect: 0.9 },\r\n        round: { title: 'Round', aspect: 1 },\r\n    },\r\n    dungeon_size: {\r\n        fine: { title: 'Fine', size: 200, cell: 18 },\r\n        dimin: { title: 'Diminiutive', size: 252, cell: 18 },\r\n        tiny: { title: 'Tiny', size: 318, cell: 18 },\r\n        small: { title: 'Small', size: 400, cell: 18 },\r\n        medium: { title: 'Medium', size: 504, cell: 18 },\r\n        large: { title: 'Large', size: 635, cell: 18 },\r\n        huge: { title: 'Huge', size: 800, cell: 18 },\r\n        gargant: { title: 'Gargantuan', size: 1008, cell: 18 },\r\n        colossal: { title: 'Colossal', size: 1270, cell: 18 },\r\n    },\r\n    add_stairs: {\r\n        no: { title: 'No' },\r\n        yes: { title: 'Yes' },\r\n        many: { title: 'Many' },\r\n    },\r\n    room_layout: {\r\n        sparse: { title: 'Sparse' },\r\n        scattered: { title: 'Scattered' },\r\n        dense: { title: 'Dense' },\r\n    },\r\n    room_size: {\r\n        small: { title: 'Small', size: 2, radix: 2 },\r\n        medium: { title: 'Medium', size: 2, radix: 5 },\r\n        large: { title: 'Large', size: 5, radix: 2 },\r\n        huge: { title: 'Huge', size: 5, radix: 5, huge: true }, // 'huge' is used here\r\n        gargant: { title: 'Gargantuan', size: 8, radix: 5, huge: true }, // 'huge' is used here\r\n        colossal: { title: 'Colossal', size: 8, radix: 8, huge: true }, // 'huge' is used here\r\n    },\r\n    doors: {\r\n        none: { title: 'None' },\r\n        basic: { title: 'Basic' },\r\n        secure: { title: 'Secure' },\r\n        standard: { title: 'Standard' },\r\n        deathtrap: { title: 'Deathtrap' },\r\n    },\r\n    corridor_layout: {\r\n        labyrinth: { title: 'Labyrinth', pct: 0 },\r\n        errant: { title: 'Errant', pct: 50 },\r\n        straight: { title: 'Straight', pct: 90 },\r\n    },\r\n    remove_deadends: {\r\n        none: { title: 'None', pct: 0 },\r\n        some: { title: 'Some', pct: 50 },\r\n        all: { title: 'All', pct: 100 },\r\n    },\r\n};\r\nexport const DefaultDungeonSettings = {\r\n    map_style: 'standard', grid: 'square', dungeon_layout: 'rectangle',\r\n    dungeon_size: /*'medium'*/ 'fine', add_stairs: 'yes', room_layout: 'scattered', room_size: 'medium', doors: 'standard', corridor_layout: 'errant', remove_deadends: 'some'\r\n}","import { GenData, name_set, NameSet } from '../types';\r\n\r\nexport const gen_data: GenData = {\r\n  'Dungeon Name': [\r\n    'The ${ Dungeon Type } of ${ Dire Horror } ${ Dungeon Horror }',\r\n    'The ${ Lost Dungeon } ${ Dungeon Type } of ${ Dungeon Horror }',\r\n    'The ${ Dungeon Type } of ${ lt The Darklord }',\r\n    'The ${ Lost Dungeon } ${ Dungeon Type } of ${ lt The Darklord }'\r\n  ],\r\n  'Lost Dungeon': [\r\n    \"Black\", \"Dark\", \"Dread\", \"Forsaken\", \"Lost\", \"Secret\"\r\n  ],\r\n  'Dungeon Type': [\r\n    \"Barrow\", \"Catacombs\", \"Caverns\", \"Chambers\", \"Crypts\", \"Cyst\", \"Delve\", \"Dungeon\", \"Gauntlet\", \"Halls\", \"Hive\", \"Labyrinth\", \"Lair\", \"Pit\", \"Prison\", \"Sanctum\", \"Sepulcher\", \"Shrine\", \"Temple\", \"Tomb\", \"Tunnels\", \"Undercrypt\", \"Vaults\", \"Warrens\"\r\n  ],\r\n  'Dire Horror': [\r\n    '${ Bloody Epithet };${ Dark Epithet };${ Dire Epithet };${ Eldritch Epithet };${ Fiendish Epithet };${ Mighty Epithet }'\r\n  ].map(epithets => epithets.split(';')).flat(),\r\n  'Bloody Epithet': [\r\n    \"Bloody\", \"Crimson\", \"Ghastly\", \"Gruesome\"\r\n  ],\r\n  'Dark Epithet': [\r\n    \"Aphotic\", \"Black\", \"Dark\", \"Dismal\", \"Gloomy\", \"Tenebrous\", \"Shadowy\", \"Sunless\"\r\n  ],\r\n  'Dire Epithet': [\r\n    \"Baleful\", \"Cruel\", \"Dire\", \"Grim\", \"Horrendous\", \"Merciless\", \"Poisonous\", \"Sinister\", \"Treacherous\", \"Unspeakable\", \"Woeful\"\r\n  ],\r\n  'Eldritch Epithet': [\r\n    \"Arcane\", \"Demonic\", \"Eldritch\", \"Elemental\", \"Fiendish\", \"Infernal\", \"Unearthly\"\r\n  ],\r\n  'Fiendish Epithet': [\r\n    \"Abyssal\", \"Accursed\", \"Baatorian\", \"Black\", \"Corrupt\", \"Damned\", \"Demonic\", \"Fallen\", \"Fell\", \"Fiendish\", \"Hellish\", \"Malefic\", \"Malevolent\", \"Malign\", \"Profane\", \"Vile\", \"Wicked\"\r\n  ],\r\n  'Mighty Epithet': [\r\n    \"Adamant\", \"Awesome\", \"Indomitable\", \"Mighty\", \"Terrible\"\r\n  ],\r\n  'Dungeon Horror': [\r\n    \"Ages\", \"Annihilation\", \"Chaos\", \"Death\", \"Devastation\", \"Doom\", \"Evil\", \"Horror\", \"Madness\", \"Malice\", \"Necromancy\", \"Nightmares\", \"Ruin\", \"Secrets\", \"Sorrows\", \"Souls\", \"Terror\", \"Woe\", \"Worms\"\r\n  ],\r\n  'The Darklord': [\r\n    '${ Named Darklord }',\r\n    '${ Darklord Name }',\r\n    '${ Darklord Name } the ${ Darklord Epithet }',\r\n    'The ${ Monster Epithet } ${ Noble Title }'\r\n  ],\r\n  'Named Darklord': [\r\n    \"Emirkol the Chaotic\",\r\n    \"Gothmog of Udun\",\r\n    \"Kas the Bloody\",\r\n    \"Kas the Betrayer\",\r\n    \"Lord Greywulf\",\r\n    \"Marceline the Vampire Queen\",\r\n    \"Shiva the Destroyer\",\r\n    \"The Goblin King\",\r\n    \"Ulfang the Black\",\r\n    \"Zeiram the Lich\"\r\n  ],\r\n  'Darklord Name': [\r\n    '${ gen_name Draconic }',\r\n    '${ gen_name Gothic }',\r\n    '${ gen_name Fiendish }'\r\n  ],\r\n  'Darklord Epithet': [\r\n    '${ Bloody Epithet };${ Dire Epithet };${ Eldritch Epithet };${ Fiendish Epithet };${ Insane Epithet };${ Mighty Epithet };${ Darkmage }'\r\n  ].map(epithets => epithets.split(';')).flat(),\r\n  'Insane Epithet': [\r\n    \"Deranged\", \"Insane\", \"Lunatic\", \"Mad\", \"Possessed\"\r\n  ],\r\n  'Darkmage': [\r\n    \"Archmage\", \"Enchantress\", \"Necromancer\", \"Pontifex\", \"Sorceror\", \"Warlock\", \"Witch\"\r\n  ],\r\n  'Monster Epithet': [\r\n    \"Demon\", \"Gargoyle\", \"Lich\", \"Shadow\", \"Vampire\", \"Wraith\", \"Wyrm\"\r\n  ],\r\n  'Noble Title': [\r\n    \"Baron\", \"Count\", \"Duke\", \"Knight\", \"Lord\", \"Warlord\", \"Baroness\", \"Countess\", \"Duchess\", \"Knight\", \"Emperor\", \"King\", \"Prince\", \"Tyrant\", \"Empress\", \"Princess\", \"Queen\"\r\n  ]\r\n};\r\n","// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n// generator.ts\r\n//\r\n// written by drow <drow@bin.sh>\r\n// http://creativecommons.org/licenses/by-nc/3.0/\r\nimport { dicerolls } from './dice';\r\nimport { GenData, NameSet, name_set } from './types'\r\nimport { gen_data } from './dungeon/gen_data';\r\n'use strict';\r\n\r\nclass Trace {\r\n    var: { [key: string]: any } = {};\r\n    exclude: { [key: string]: boolean } = {};\r\n    comma?: string;\r\n\r\n    constructor() { }\r\n\r\n    setVariable(name: string, value: any) {\r\n        this.var[name] = value;\r\n    }\r\n\r\n    getVariable(name: string): any {\r\n        return this.var[name];\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function generate_text(a: string): string {\r\n    console.log(\"Generating text for key:\", a); // Log the key being used\r\n    if (gen_data[a]) {\r\n        let selected = select_from(gen_data[a]);\r\n        console.log(\"Selected value:\", selected); // Log the selected value\r\n        if (selected) {\r\n            let c = new_trace();\r\n            let expanded = expand_tokens(selected.toString(), c);\r\n            console.log(\"Expanded tokens:\", expanded); // Log the expanded tokens\r\n            return expanded;\r\n        } else {\r\n            console.error(\"select_from returned undefined or null.\");\r\n        }\r\n    } else {\r\n        console.error(`Key \"${a}\" not found in gen_data.`);\r\n    }\r\n    return '';\r\n}\r\n\r\nexport function select_from(a: string | number | GenData | string[]): string {\r\n    if (typeof a === 'number') {\r\n        return a.toString(); // Convert number to string\r\n    }\r\n    if (Array.isArray(a)) {\r\n        return select_from_array(a); // Return a string from the array\r\n    }\r\n    if (typeof a === 'object') {\r\n        // Ensure 'a' is of type GenData\r\n        const table = a as GenData;\r\n        const result = select_from_table(table);\r\n\r\n        // Validate the result\r\n        const validDoorTypes = [65536, 131072, 262144, 524288, 1048576, 2097152];\r\n        if (validDoorTypes.includes(result)) {\r\n            return result.toString(); // Return the valid door type as a string\r\n        } else {\r\n            //console.error(\"Invalid door type selected:\", result);\r\n            return \"131072\"; // Default to 'Unlocked Door' as a string\r\n        }\r\n    }\r\n    return a; // Return the string as-is\r\n}\r\n\r\nexport function select_from_array(a: string[]): string {\r\n    return a[random(a.length)];\r\n}\r\n\r\nexport function select_from_table(table: GenData): number {\r\n    const total = scale_table(table); // Get the maximum range value\r\n    const roll = random(total); // Generate a random number within the range\r\n\r\n    for (const [key, value] of Object.entries(table)) {\r\n        if (typeof value === 'number') { // Ensure the value is a number\r\n            const [min, max] = key_range(key); // Parse the key range\r\n            if (roll >= min && roll <= max) {\r\n                return value; // Return the corresponding value\r\n            }\r\n        }\r\n    }\r\n\r\n    //console.log(\"No valid door type found for roll:\", roll);\r\n    return 131072; // Default to 'Unlocked Door' if no match is found\r\n}\r\n\r\nexport function scale_table(a: GenData): number {\r\n    let c = 0;\r\n    for (let b in a) {\r\n        let d = key_range(b);\r\n        d[1] > c && (c = d[1]);\r\n    }\r\n    return c;\r\n}\r\n\r\nexport function key_range(a: string): [number, number] {\r\n    let c: RegExpExecArray | null;\r\n    return (c = /(\\d+)-00/.exec(a)) ? [parseInt(c[1], 10), 100] :\r\n        (c = /(\\d+)-(\\d+)/.exec(a)) ? [parseInt(c[1], 10), parseInt(c[2], 10)] :\r\n            '00' == a ? [100, 100] : [parseInt(a, 10), parseInt(a, 10)];\r\n}\r\n\r\nexport function new_trace(): Trace {\r\n    return new Trace();\r\n}\r\n\r\nexport function local_trace(a: Trace): Trace {\r\n    let c = Object.assign({}, a);\r\n    c['var'] = Object.assign({}, a['var']);\r\n    return c;\r\n}\r\n\r\nexport function expand_tokens(a: string, c: Trace): string {\r\n    let b = /\\${ ([^{}]+) }/;\r\n    let d: RegExpExecArray | null;\r\n    let match: string | undefined;\r\n    while ((d = b.exec(a) as RegExpExecArray) && (match = d[1])) {\r\n        match = d[1];\r\n        let e: string | undefined;\r\n        a = (e = expand_token(match!, c)) ? a.replace('${ ' + match! + ' }', e) : a.replace('{' + match! + '}', match!);\r\n    }\r\n    return a;\r\n}\r\n\r\nexport function getStringFromGenData(value: string | number | GenData): string {\r\n    if (typeof value === 'string') {\r\n        return value;\r\n    } else if (typeof value === 'number') {\r\n        // Handle the number case (e.g., convert it to a string or return a default value)\r\n        return value.toString(); // Convert the number to a string\r\n    } else {\r\n        return select_from(value) as any;\r\n    }\r\n}\r\n\r\nexport function expand_token(a: string, c: Trace): string {\r\n    let b: RegExpExecArray | null;\r\n    console.log(`Expanding token: ${a}`);\r\n\r\n    // Handle tokens like ${ Dungeon Type }\r\n    if (gen_data[a]) {\r\n        return select_from(gen_data[a]); // Replace the token with a value from gen_data\r\n    }\r\n    // Dice rolls\r\n    else if ((b = /^\\d*d\\d+/.exec(a)) || (b = /^calc (.+)/.exec(a))) {\r\n        return roll_dice_str(b[1]);\r\n    }\r\n\r\n    // Expansion of x tokens\r\n    else if (b = /^(\\d+) x (.+)/.exec(a)) {\r\n        return expand_x(parseInt(b[1], 10), b[2], c);\r\n    }\r\n\r\n    // Array expansion\r\n    else if (b = /^\\[ (.+) \\]/.exec(a)) {\r\n        let tokens: string[] = b[1].split(/,\\s*/);\r\n        return expand_tokens(select_from_array(tokens), c);\r\n    }\r\n\r\n    // Data expansion\r\n    else if (b = /^alt (.+) def (.+)/.exec(a)) {\r\n        const key1 = b[1];\r\n        const key2 = b[2];\r\n        let d1 = select_from(gen_data[key1]);\r\n        let d2 = select_from(gen_data[key2]);\r\n\r\n        if (d1 !== b[2]) {\r\n            return getStringFromGenData(d1);\r\n        } else {\r\n            return getStringFromGenData(d2);\r\n        }\r\n    }\r\n\r\n    // Unique tokens\r\n    else if (b = /^unique (.+)/.exec(a)) {\r\n        return expand_unique(b[1], c);\r\n    }\r\n\r\n    // Local variable expansion\r\n    else if (b = /^local (.+)/.exec(a)) {\r\n        let newC: Trace = local_trace(c);\r\n        return expand_token(b[1], newC);\r\n    }\r\n\r\n    // New trace expansion\r\n    else if (b = /^new (.+)/.exec(a)) {\r\n        let newC: Trace = new_trace();\r\n        return expand_token(b[1], newC);\r\n    }\r\n\r\n    // Set variable\r\n    else if (b = /^set (\\w+) = (.+?) in (.+)/.exec(a)) {\r\n        c['var'][b[1]] = b[2];\r\n        return expand_token(b[3], c);\r\n    }\r\n\r\n    // Set variable (simple)\r\n    else if (b = /^set (\\w+) = (.+)/.exec(a)) {\r\n        set_var(b[1], b[2], c);\r\n        return '';\r\n    }\r\n\r\n    // Get variable\r\n    else if (b = /^get (\\w+) def (.+)/.exec(a)) {\r\n        return c['var'][b[1]] || b[2];\r\n    }\r\n\r\n    // Get variable (fix)\r\n    else if (b = /^get (\\w+) fix (.+)/.exec(a)) {\r\n        let varName: string = b[1];\r\n        let defaultValue: string = b[2];\r\n        let value: string | undefined = c['var'][varName];\r\n        if (!value) {\r\n            return set_var(varName, defaultValue, c);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    // Get variable (simple)\r\n    else if (b = /^get (\\w+)/.exec(a)) {\r\n        let varName: string = b[1];\r\n        let value: string | undefined = c['var'][varName];\r\n        if (!value) {\r\n            throw new Error(`Variable '${varName}' not defined`);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    // Shift array\r\n    else if (b = /^shift (\\w+) = (.+)/.exec(a)) {\r\n        let varName: string = b[1];\r\n        let values: string[] = b[2].split(/,\\s*/);\r\n        c['var'][varName] = values;\r\n        c['var'][varName].shift();\r\n        return '';\r\n    }\r\n\r\n    // Shift array (simple)\r\n    else if (b = /^shift (\\w+)/.exec(a)) {\r\n        let varName: string = b[1];\r\n        if (!c['var'][varName]) {\r\n            throw new Error(`Variable '${varName}' not defined`);\r\n        } else {\r\n            c['var'][varName].shift();\r\n            return '';\r\n        }\r\n    }\r\n\r\n    // An token\r\n    else if (b = /^an (.+)/.exec(a)) {\r\n        return aoran(expand_token(b[1], c));\r\n    }\r\n\r\n    // An token (capitalized)\r\n    else if (b = /^An (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return ucfirst(result);\r\n    }\r\n\r\n    // No the\r\n    else if (b = /^nt (.+)/.exec(a)) {\r\n        return nothe(expand_token(b[1], c));\r\n    }\r\n\r\n    // Lowercase\r\n    else if (b = /^lc (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return lc(result);\r\n    }\r\n\r\n    // Inline case\r\n    else if (b = /^lf (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return inline_case(result);\r\n    }\r\n\r\n    // Lower the\r\n    else if (b = /^lt (.+)/.exec(a)) {\r\n        return lthe(expand_token(b[1], c));\r\n    }\r\n\r\n    // Uppercase\r\n    else if (b = /^uc (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return uc(result);\r\n    }\r\n\r\n    // First uppercase letter\r\n    else if (b = /^uf (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return ucfirst(result);\r\n    }\r\n\r\n    // Sentence case\r\n    else if (b = /^sc (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return lc(result);\r\n    }\r\n\r\n    // Title case\r\n    else if (b = /^tc (.+)/.exec(a)) {\r\n        let result: string = expand_token(b[1], c);\r\n        return title_case(result);\r\n    }\r\n\r\n    // Generate name\r\n    else if (b = /^gen_name (.+)/.exec(a)) {\r\n        const nameType = b[1].trim() as keyof NameSet; // Extract and trim the name type\r\n        return generate_name(nameType); // Call generate_name with the extracted type\r\n    }\r\n\r\n    // Default case\r\n    else {\r\n        return a;\r\n    }\r\n}\r\n\r\nfunction expand_x(a: number, c: string, b: Trace): string {\r\n    let d: { [key: string]: boolean } = {}, e: { [key: string]: number } = {}, f: string[] = [], l = b.comma || ', ';\r\n    let andMatch;\r\n    for (; andMatch = /^(and|literal|unique) (.+)/.exec(c);)\r\n        d[andMatch[1]] = !0, c = andMatch[2];\r\n    let k: number;\r\n    for (k = 0; k < a; k++) {\r\n        let g: string = c.toString();\r\n        if (d.unique) {\r\n            g = expand_unique(g, b);\r\n        } else {\r\n            g = expand_token(g, b);\r\n        }\r\n        if (d.literal) {\r\n            f.push(g);\r\n        } else {\r\n            const match = /^(\\d+) x (.+)/.exec(g);\r\n            if (match) {\r\n                e[match[2]] = (e[match[2]] || 0) + parseInt(match[1], 10);\r\n            } else {\r\n                const increment = (e[g] || 0) + 1;\r\n                e[g] = increment;\r\n            }\r\n        }\r\n    }\r\n    Object.keys(e).sort().forEach(h => {\r\n        if (e[h] > 1) {\r\n            f.push([e[h], h].join(' x '));\r\n        } else {\r\n            f.push(h);\r\n        }\r\n    });\r\n    let popped: string | undefined;\r\n    return d.and ? (\r\n        popped = f.pop(),\r\n        (popped !== undefined ? [f.join(l), popped].join(' and ') : f.join(l))\r\n    ) : f.join(l);\r\n}\r\n\r\nfunction expand_unique(a: string, c: Trace): string {\r\n    let b: number;\r\n    for (b = 0; 100 > b; b++) {\r\n        let d = expand_token(a, c);\r\n        if (!c.exclude[d])\r\n            return c.exclude[d] = !0, d;\r\n    }\r\n    return '';\r\n}\r\n\r\nfunction set_var(a: string, c: string, b: Trace): string {\r\n    if ('npc_name' == a) {\r\n        let d: RegExpExecArray | null;\r\n        (d = /^(.+?) .+/.exec(c)) ? b['var'].name = d[1] : b['var'].name = c;\r\n    }\r\n    return b['var'][a] = c;\r\n}\r\n\r\nfunction aoran(a: string): string {\r\n    return /^the /i.test(a) ? a : /^(nunchaku)/i.test(a) ? a : /^(unicorn|unique|university)/i.test(a) ? `a ${a}` : /^(hour)/i.test(a) ? `an ${a}` : /^[BCDGJKPQTUVWYZ][A-Z0-9]+/.test(a) ? `a ${a}` : /^[AEFHILMNORSX][A-Z0-9]+/.test(a) ? `an ${a}` : /^[aeiou]/i.test(a) ? `an ${a}` : `a ${a}`;\r\n}\r\n\r\nfunction nothe(a: string): string {\r\n    let c: RegExpExecArray | null;\r\n    return (c = /^the (.+)/i.exec(a)) ? c[1] : a;\r\n}\r\n\r\nfunction lc(a: string): string {\r\n    return a.toLowerCase();\r\n}\r\n\r\nfunction lcfirst(a: string): string {\r\n    let c: RegExpExecArray | null;\r\n    return (c = /^([a-z])(.*)/i.exec(a)) ? lc(c[1]) + c[2] : a;\r\n}\r\n\r\nfunction inline_case(a: string): string {\r\n    return /^[A-Z][A-Z]/.test(a) ? a : lcfirst(a);\r\n}\r\n\r\nfunction lthe(a: string): string {\r\n    let c: RegExpExecArray | null;\r\n    return (c = /^the (.+)/i.exec(a)) ? `the ${c[1]}` : a;\r\n}\r\n\r\nfunction uc(a: string): string {\r\n    return a.toUpperCase();\r\n}\r\n\r\nfunction ucfirst(a: string): string {\r\n    let c: RegExpExecArray | null;\r\n    return (c = /^([a-z])(.*)/i.exec(a)) ? uc(c[1]) + c[2] : a;\r\n}\r\n\r\nfunction title_case(a: string): string {\r\n    return a.split(/\\s+/).map(uc).join(' ');\r\n}\r\n\r\nfunction generate_name(nameType: keyof NameSet): string {\r\n    const names = name_set[nameType];\r\n    if (!names || names.length === 0) {\r\n        console.error(`No names found for type: ${nameType}`);\r\n        return \"Unknown\";\r\n    }\r\n    return names[Math.floor(Math.random() * names.length)];\r\n}\r\n\r\nfunction roll_dice_str(a: string): string {\r\n    // Implement the roll_dice_str function\r\n    return `${a}`;\r\n}\r\n\r\nfunction random(max: number): number {\r\n    return Math.floor(Math.random() * max);\r\n}","// canvas2.ts\r\n\r\n// Declare the $ function for selecting canvas elements\r\nconst $ = (id: string): HTMLCanvasElement => document.getElementById(id) as HTMLCanvasElement;\r\n\r\n// State variables\r\nconst m: { [key: string]: number[] } = {};\r\nlet n: boolean = false;\r\nlet k: { [key: string]: [number, number][] } = {};\r\n\r\n//Exported functions\r\n\r\nfunction toHex(a: number, c: number, b: number): string {\r\n    const d = '#' + [\r\n        ('00' + a.toString(16)).slice(-2),\r\n        ('00' + c.toString(16)).slice(-2),\r\n        ('00' + b.toString(16)).slice(-2)\r\n    ].join('');\r\n    m[d] = [a, c, b, 255];\r\n    return d;\r\n}\r\n\r\nexport function color2rgb(a: string): number[] {\r\n    if (m[a]) {\r\n        return m[a];\r\n    }\r\n    let c: number[];\r\n    const b = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})/i.exec(a)\r\n        || /^#([0-9a-f])([0-9a-f])([0-9a-f])/i.exec(a);\r\n    if (b) {\r\n        c = [parseInt(b[1], 16), parseInt(b[2], 16), parseInt(b[3], 16), 255];\r\n    } else {\r\n        const rgbMatch = /^rgb\\((\\d+),(\\d+),(\\d+)\\)/i.exec(a);\r\n        if (rgbMatch) {\r\n            c = [parseInt(rgbMatch[1], 10), parseInt(rgbMatch[2], 10), parseInt(rgbMatch[3], 10), 255];\r\n        } else {\r\n            c = [0, 0, 0, 255];\r\n        }\r\n    }\r\n    m[a] = c;\r\n    return c;\r\n}\r\n\r\nexport function hsv2rgb(a: number[]): number[] {\r\n    const c = a[0];\r\n    const b = a[2] / 100;\r\n    const aVal = a[1] / 100 * b;\r\n    const d = aVal * (1 - Math.abs(c / 60 % 2 - 1));\r\n    const e = b - aVal;\r\n    let eColor: number = 0, fColor: number = 0, hColor: number = 0; // set variables so typescript knows that they are assigned, though logic assures it\r\n\r\n    if (c < 60) {\r\n        eColor = aVal;\r\n        fColor = d;\r\n    } else if (c < 120) {\r\n        eColor = d;\r\n        fColor = aVal;\r\n    } else if (c < 180) {\r\n        fColor = aVal;\r\n        hColor = d;\r\n    } else if (c < 240) {\r\n        fColor = d;\r\n        hColor = aVal;\r\n    } else if (c < 300) {\r\n        eColor = d;\r\n        hColor = aVal;\r\n    } else {\r\n        eColor = aVal;\r\n        hColor = d;\r\n    }\r\n    eColor = Math.min(Math.max(Math.floor(255 * (eColor + e)), 0), 255);\r\n    fColor = Math.min(Math.max(Math.floor(255 * (fColor + e)), 0), 255);\r\n    hColor = Math.min(Math.max(Math.floor(255 * (hColor + e)), 0), 255);\r\n    return [eColor, fColor, hColor];\r\n}\r\n\r\nexport function set_pixel(a: CanvasRenderingContext2D, c: number, b: number, d: string): void {\r\n    if (n) {\r\n        if (k[d]) {\r\n            k[d].push([c, b]);\r\n        } else {\r\n            k[d] = [[c, b]];\r\n        }\r\n    } else {\r\n        fill_rect(a, c, b, c, b, d);\r\n    }\r\n}\r\n\r\nexport function fill_rect(a: CanvasRenderingContext2D, c: number, b: number, d: number, e: number, f: string): void {\r\n    a.fillStyle = f;\r\n    a.fillRect(c, b, d - c + 1, e - b + 1); //ensure the rectangle includes the end coordinates.\r\n}\r\n\r\nexport function new_image(a: string, c: number, b: number): CanvasRenderingContext2D {\r\n    const canvas = $(a);\r\n    if (!canvas) {\r\n        throw new Error(`Canvas element with ID ${a} not found.`);\r\n    }\r\n    canvas.width = c;\r\n    canvas.height = b;\r\n    const ctx = canvas.getContext('2d', { willReadFrequently: true });\r\n    if (!ctx) {\r\n        throw new Error(`Failed to get 2D context for canvas '${a}'.`);\r\n    }\r\n    if (ctx) {\r\n        fill_rect(ctx, 0, 0, c, b, '#ffffff');\r\n    }\r\n    return ctx!;\r\n};\r\n\r\nexport function rgb2hex(a: number, c: number, b: number): string {\r\n    const d = `#${(a | 0).toString(16).padStart(2, '0')}${(c | 0).toString(16).padStart(2, '0')}${(b | 0).toString(16).padStart(2, '0')}`;\r\n    m[d] = [a, c, b, 255];\r\n    return d;\r\n}\r\n\r\nexport function hsv2hex(a: number[]): string {\r\n    const rgb = hsv2rgb(a);\r\n    return toHex(rgb[0], rgb[1], rgb[2]);\r\n};\r\n\r\n\r\n\r\nexport function rgb2hsv(a: number[]): number[] {\r\n    const c = a[0] / 255;\r\n    const b = a[1] / 255;\r\n    const d = a[2] / 255;\r\n    const max = Math.max(c, b, d);\r\n    const e = max - Math.min(c, b, d);\r\n    const hue = (Math.floor(60 * (0 === e ? 0 : max === c ? (b - d) / e % 6 : max === b ? (d - c) / e + 2 : (c - b) / e + 4)) + 360) % 360;\r\n    const saturation = Math.min(Math.max(Math.floor(100 * (0 === max ? 0 : e / max)), 0), 100);\r\n    const value = Math.min(Math.max(Math.floor(100 * max), 0), 100);\r\n    return [hue, saturation, value];\r\n};\r\n\r\nexport function cache_pixels(a: boolean): void {\r\n    n = a;\r\n};\r\n\r\nexport function draw_pixels(a: CanvasRenderingContext2D): void {\r\n    const c = a.canvas.width;\r\n    const b = a.getImageData(0, 0, c, a.canvas.height);\r\n    Object.keys(k).forEach(d => {\r\n        const e = color2rgb(d);\r\n        k[d].forEach(f => {\r\n            const index = f[1] * c + f[0] << 2;\r\n            for (let h = 0; h < 4; h++) {\r\n                b.data[index + h] = e[h];\r\n            }\r\n        });\r\n    });\r\n    a.putImageData(b, 0, 0);\r\n    n = false;\r\n    k = {};\r\n};\r\n\r\nexport function draw_line(a: CanvasRenderingContext2D, c: number, b: number, d: number, e: number, f: string): void {\r\n    if (d === c && e === b) {\r\n        set_pixel(a, c, b, f);\r\n    } else {\r\n        a.beginPath();\r\n        a.moveTo(c + 0.5, b + 0.5); // draw crisp lines by aligning to pixel grid\r\n        a.lineTo(d + 0.5, e + 0.5); // draw crisp lines by aligning to pixel grid\r\n        a.strokeStyle = f;\r\n        a.stroke();\r\n    }\r\n};\r\n\r\nexport function stroke_rect(a: CanvasRenderingContext2D, c: number, b: number, d: number, e: number, f: string): void {\r\n    a.strokeStyle = f;\r\n    a.strokeRect(c, b, d - c + 1, e - b + 1); //ensure the rectangle includes the end coordinates.\r\n};\r\n\r\nexport function draw_string(a: CanvasRenderingContext2D, c: string, b: number, d: number, e: string, f: string): void {\r\n    a.textBaseline = 'middle';\r\n    a.textAlign = 'center';\r\n    a.font = e;\r\n    a.fillStyle = f;\r\n    a.fillText(c, b, d);\r\n};\r\n\r\nexport function draw_image(a: CanvasRenderingContext2D, c: HTMLImageElement, b: number, d: number): void {\r\n    a.drawImage(c, b, d);\r\n};\r\n\r\nexport function save_canvas(a: HTMLCanvasElement, c: string): void {\r\n    const dataURL = a.toDataURL('image/png').replace('image/png', 'image/octet-stream');\r\n    const link = document.createElement('a');\r\n    if ('string' === typeof link.download) { //checks if the download attribute is supported\r\n        link.href = dataURL;\r\n        link.download = c;\r\n        link.click();\r\n    } else {\r\n        window.location.assign(dataURL);\r\n    }\r\n};","// Import necessary functions from other modules\r\nimport { set_prng_seed, random } from './prng'\r\nimport { generate_text, select_from_table, select_from } from './generator';\r\nimport { set_pixel, draw_line, fill_rect, stroke_rect, draw_string, save_canvas } from './canvas';\r\nimport {\r\n    DirectionKey, SettingOption, DirectionConfig, DirectionDetails, Direction, Ea, EaParams,\r\n    DoorPosition, Stair, Door, DungeonSettings, DefaultDungeonSettings, DungeonSettingsI, Room,\r\n    DungeonData, FObject, P, M, GenData, Palette, PaletteKey, RoomConfig, ma, V, UserSettings\r\n} from './types'\r\nimport { userInfo } from 'os';\r\n\r\nfunction printDungeon(dungeonData: DungeonData): void {\r\n    const { cell, n_rows, n_cols } = dungeonData;\r\n    let output = '';\r\n\r\n    // Define dungeon feature characters\r\n    const FEATURE_CHARS = {\r\n        WALL: 'w',       // Wall (1 or 16)\r\n        ROOM: 'R',       // Room floor (2)\r\n        CORRIDOR: '+',   // Corridor (4)\r\n        DOOR: 'D',       // Door (65536, 131072, etc.)\r\n        STAIR_DOWN: 'v', // Down stairs (4194304)\r\n        STAIR_UP: '^',   // Up stairs (8388608)\r\n        LABEL: 'L',      // Room label (upper bits)\r\n        EMPTY: '.',      // Empty space\r\n    };\r\n\r\n    // Iterate through each cell in the dungeon grid\r\n    for (let row = 0; row <= n_rows; row++) {\r\n        for (let col = 0; col <= n_cols; col++) {\r\n            const cellValue = cell[row][col];\r\n            let char = FEATURE_CHARS.EMPTY; // Default to empty space\r\n\r\n            // Check for overlapping features in priority order\r\n            if (cellValue & 4194304) {\r\n                char = FEATURE_CHARS.STAIR_DOWN; // Down stairs\r\n            } else if (cellValue & 8388608) {\r\n                char = FEATURE_CHARS.STAIR_UP; // Up stairs\r\n            } else if (cellValue & 65536 || cellValue & 131072 || cellValue & 262144 || cellValue & 524288 || cellValue & 1048576 || cellValue & 2097152) {\r\n                char = FEATURE_CHARS.DOOR; // Door\r\n            } else if ((cellValue >> 24) & 255) {\r\n                // Handle room labels (room IDs)\r\n                const roomId = (cellValue >> 24) & 255; // Extract the room ID from the upper bits\r\n                // Only display printable ASCII characters (32 to 126)\r\n                if (roomId >= 32 && roomId <= 126) {\r\n                    char = String.fromCharCode(roomId); // Convert the room ID to its corresponding ASCII character\r\n                } else {\r\n                    char = FEATURE_CHARS.ROOM; // Fallback to room floor character for non-printable IDs\r\n                }\r\n            } else if (cellValue & 2) {\r\n                char = FEATURE_CHARS.ROOM; // Room floor\r\n            } else if (cellValue & 4) {\r\n                char = FEATURE_CHARS.CORRIDOR; // Corridor\r\n            } else if (cellValue & 1 || cellValue & 16) {\r\n                char = FEATURE_CHARS.WALL; // Wall\r\n            }\r\n\r\n            output += char + ' ';\r\n        }\r\n        output += '\\n'; // New line after each row\r\n    }\r\n\r\n    console.log(output);\r\n}\r\n\r\nfunction generatePalette(mapStyle: string): Palette {\r\n    let palette: Palette = {};\r\n\r\n    // Get the base palette based on the map_style\r\n    const basePalette = V[mapStyle]?.colors || V.standard.colors;\r\n\r\n    // Merge the base palette with default colors\r\n    palette = { ...basePalette };\r\n\r\n    // Ensure default colors are set\r\n    palette.black = palette.black || '#000000';\r\n    palette.white = palette.white || '#ffffff';\r\n\r\n    return palette;\r\n}\r\n\r\nfunction initializeDropdowns() {\r\n    // Loop through each setting in DungeonSettings\r\n    Object.keys(DungeonSettings).forEach((key) => {\r\n        const settingsKey = key as keyof DungeonSettingsI;\r\n        const dropdown = $(`#${key}`); // Get the dropdown element by ID\r\n\r\n        if (dropdown.length === 0) {\r\n            console.error(`Dropdown with ID \"${key}\" not found!`);\r\n        } else {\r\n            // Populate the dropdown with options\r\n            Object.keys(DungeonSettings[settingsKey]).forEach((optionKey) => {\r\n                const option = DungeonSettings[settingsKey][optionKey];\r\n                dropdown.append(`<option value=\"${optionKey}\">${option.title}</option>`);\r\n            });\r\n\r\n            // Set the default value for the dropdown using DefaultDungeonSettings\r\n            const defaultValue = DefaultDungeonSettings[settingsKey];\r\n            dropdown.val(defaultValue); // Set the default value\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Generates the initial dungeon configuration based on user settings.\r\n * @param userSettings - The user's settings for dungeon generation.\r\n * @returns The initial dungeon configuration.\r\n */\r\nexport function generateDungeonDataConfig(userSettings: UserSettings): DungeonData {\r\n    // Validate user settings\r\n    if (!userSettings) {\r\n        throw new Error(\"User settings are required to generate dungeon data.\");\r\n    }\r\n\r\n    // Initialize the config object with default values\r\n    const config: DungeonData = {\r\n        seed: set_prng_seed($(\"#dungeon_name\").val() as string),\r\n        cell: [],\r\n        n_rooms: 0,\r\n        room: {},\r\n        n_cols: 0,\r\n        n_rows: 0,\r\n        max_col: 0,\r\n        max_row: 0,\r\n        cell_size: 0,\r\n        door_type: \"standard\",\r\n        n_i: 0,\r\n        n_j: 0,\r\n        base_layer: null,\r\n    };\r\n\r\n    // Calculate dungeon dimensions based on user settings\r\n    config.n_i = calculateDungeonRows(userSettings.dungeon_size, userSettings.dungeon_layout);\r\n    config.n_j = calculateDungeonColumns(userSettings.dungeon_size, userSettings.dungeon_layout);\r\n    config.cell_size = getCellSize(userSettings.dungeon_size);\r\n    config.n_rows = 2 * config.n_i;\r\n    config.n_cols = 2 * config.n_j;\r\n    config.max_row = config.n_rows - 1;\r\n    config.max_col = config.n_cols - 1;\r\n\r\n    // Initialize the cell array with zeros\r\n    config.cell = initializeCellArray(config.n_rows, config.n_cols);\r\n\r\n    // Apply dungeon layout masks if necessary\r\n    applyDungeonLayoutMask(config, userSettings.dungeon_layout);\r\n\r\n    // Dynamically add user settings to the config object\r\n    Object.assign(config, {\r\n        dungeon_layout: userSettings.dungeon_layout,\r\n        dungeon_size: userSettings.dungeon_size,\r\n        add_stairs: userSettings.add_stairs,\r\n        room_layout: userSettings.room_layout,\r\n        room_size: userSettings.room_size,\r\n        corridor_layout: userSettings.corridor_layout,\r\n        remove_deadends: userSettings.remove_deadends,\r\n    });\r\n\r\n    return config;\r\n}\r\n\r\n/**\r\n * Calculates the number of rows for the dungeon based on dungeon size and layout.\r\n * @param dungeonSize - The size of the dungeon (e.g., 'medium', 'large').\r\n * @param dungeonLayout - The layout of the dungeon (e.g., 'rectangle', 'square').\r\n * @returns The number of rows.\r\n */\r\nfunction calculateDungeonRows(dungeonSize: string, dungeonLayout: string): number {\r\n    const sizeConfig = DungeonSettings.dungeon_size[dungeonSize];\r\n    const layoutConfig = DungeonSettings.dungeon_layout[dungeonLayout];\r\n\r\n    if (!sizeConfig || !layoutConfig) {\r\n        throw new Error(`Invalid dungeon size or layout configuration: ${dungeonSize}, ${dungeonLayout}`);\r\n    }\r\n\r\n    const cellSize = sizeConfig.cell;\r\n    const dungeonArea = sizeConfig.size;\r\n    const aspectRatio = layoutConfig.aspect;\r\n\r\n    return Math.floor((dungeonArea * aspectRatio) / cellSize);\r\n}\r\n\r\n/**\r\n * Calculates the number of columns for the dungeon based on dungeon size and layout.\r\n * @param dungeonSize - The size of the dungeon (e.g., 'medium', 'large').\r\n * @param dungeonLayout - The layout of the dungeon (e.g., 'rectangle', 'square').\r\n * @returns The number of columns.\r\n */\r\nfunction calculateDungeonColumns(dungeonSize: string, dungeonLayout: string): number {\r\n    const sizeConfig = DungeonSettings.dungeon_size[dungeonSize];\r\n    const layoutConfig = DungeonSettings.dungeon_layout[dungeonLayout];\r\n\r\n    if (!sizeConfig || !layoutConfig) {\r\n        throw new Error(`Invalid dungeon size or layout configuration: ${dungeonSize}, ${dungeonLayout}`);\r\n    }\r\n\r\n    const cellSize = sizeConfig.cell;\r\n    const dungeonArea = sizeConfig.size;\r\n\r\n    return Math.floor(dungeonArea / cellSize);\r\n}\r\n\r\n/**\r\n * Retrieves the cell size based on the dungeon size.\r\n * @param dungeonSize - The size of the dungeon (e.g., 'medium', 'large').\r\n * @returns The cell size.\r\n */\r\nfunction getCellSize(dungeonSize: string): number {\r\n    const sizeConfig = DungeonSettings.dungeon_size[dungeonSize];\r\n    if (!sizeConfig) {\r\n        throw new Error(`Invalid dungeon size configuration: ${dungeonSize}`);\r\n    }\r\n    return sizeConfig.cell;\r\n}\r\n\r\n/**\r\n * Initializes the cell array with zeros.\r\n * @param n_rows - The number of rows in the dungeon.\r\n * @param n_cols - The number of columns in the dungeon.\r\n * @returns A 2D array initialized with zeros.\r\n */\r\nfunction initializeCellArray(n_rows: number, n_cols: number): number[][] {\r\n    const cell: number[][] = [];\r\n    for (let i = 0; i <= n_rows; i++) {\r\n        cell[i] = [];\r\n        for (let j = 0; j <= n_cols; j++) {\r\n            cell[i][j] = 0;\r\n        }\r\n    }\r\n    return cell;\r\n}\r\n\r\n/**\r\n * Applies the dungeon layout mask to the cell array.\r\n * @param dungeonData - The dungeon data configuration.\r\n * @param dungeonLayout - The layout of the dungeon (e.g., 'rectangle', 'square').\r\n */\r\nfunction applyDungeonLayoutMask(dungeonData: DungeonData, dungeonLayout: string): void {\r\n    const layoutConfig = DungeonSettings.dungeon_layout[dungeonLayout];\r\n    if (!layoutConfig) {\r\n        throw new Error(`Invalid dungeon layout configuration: ${dungeonLayout}`);\r\n    }\r\n\r\n    if (layoutConfig.mask) {\r\n        dungeonData.cell = applyMask(dungeonData.cell, layoutConfig.mask);\r\n    } else if (dungeonLayout === \"saltire\") {\r\n        dungeonData.cell = applySaltireMask(dungeonData.cell);\r\n    } else if (dungeonLayout === \"hexagon\") {\r\n        dungeonData.cell = applyHexagonMask(dungeonData.cell);\r\n    } else if (dungeonLayout === \"round\") {\r\n        dungeonData.cell = applyRoundMask(dungeonData.cell);\r\n    }\r\n}\r\n\r\n/**\r\n * Applies a mask to the cell array.\r\n * @param cell - The cell array.\r\n * @param mask - The mask to apply.\r\n * @returns The modified cell array.\r\n */\r\nfunction applyMask(cell: number[][], mask: number[][]): number[][] {\r\n    const maskRowRatio = mask.length / (cell.length + 1);\r\n    const maskColRatio = mask[0].length / (cell[0].length + 1);\r\n\r\n    for (let row = 0; row <= cell.length; row++) {\r\n        const maskRow = mask[Math.floor(row * maskRowRatio)];\r\n        for (let col = 0; col <= cell[0].length; col++) {\r\n            if (!maskRow[Math.floor(col * maskColRatio)]) {\r\n                cell[row][col] = 1; // Mark as wall\r\n            }\r\n        }\r\n    }\r\n    return cell;\r\n}\r\n\r\n/**\r\n * Applies a saltire mask to the cell array.\r\n * @param cell - The cell array.\r\n * @returns The modified cell array.\r\n */\r\nfunction applySaltireMask(cell: number[][]): number[][] {\r\n    const quarterRows = Math.floor(cell.length / 4);\r\n    for (let offset = 0; offset < quarterRows; offset++) {\r\n        const rowStart = quarterRows + offset;\r\n        const rowEnd = cell[0].length - offset;\r\n        for (let col = rowStart; col <= rowEnd; col++) {\r\n            cell[offset][col] = 1; // Top-left to bottom-right\r\n            cell[cell.length - offset][col] = 1; // Bottom-left to top-right\r\n            cell[col][offset] = 1; // Top-left to bottom-right\r\n            cell[col][cell[0].length - offset] = 1; // Bottom-left to top-right\r\n        }\r\n    }\r\n    return cell;\r\n}\r\n\r\n/**\r\n * Applies a hexagon mask to the cell array.\r\n * @param cell - The cell array.\r\n * @returns The modified cell array.\r\n */\r\nfunction applyHexagonMask(cell: number[][]): number[][] {\r\n    const midRow = Math.floor(cell.length / 2);\r\n    for (let row = 0; row <= cell.length; row++) {\r\n        const hexOffset = Math.floor(0.57735 * Math.abs(row - midRow)) + 1;\r\n        const colStart = hexOffset;\r\n        const colEnd = cell[0].length - hexOffset;\r\n        for (let col = 0; col <= cell[0].length; col++) {\r\n            if (col < colStart || col > colEnd) {\r\n                cell[row][col] = 1; // Mark as wall\r\n            }\r\n        }\r\n    }\r\n    return cell;\r\n}\r\n\r\n/**\r\n * Applies a round mask to the cell array.\r\n * @param cell - The cell array.\r\n * @returns The modified cell array.\r\n */\r\nfunction applyRoundMask(cell: number[][]): number[][] {\r\n    const midRow = cell.length / 2;\r\n    const midCol = cell[0].length / 2;\r\n    for (let row = 0; row <= cell.length; row++) {\r\n        const rowRatio = Math.pow(row / midRow - 1, 2);\r\n        for (let col = 0; col <= cell[0].length; col++) {\r\n            const colRatio = Math.pow(col / midCol - 1, 2);\r\n            if (Math.sqrt(rowRatio + colRatio) > 1) {\r\n                cell[row][col] = 1; // Mark as wall\r\n            }\r\n        }\r\n    }\r\n    return cell;\r\n}\r\n\r\nexport function lookupAtIndex(key: keyof DungeonSettingsI, value: string): SettingOption {\r\n    const settings = DungeonSettings[key];\r\n    if (settings && settings[value]) {\r\n        return settings[value];\r\n    }\r\n    throw new Error(`Setting not found for key: ${key} and value: ${value}`);\r\n}\r\n\r\nfunction xa(dungeonData: DungeonData, mask: number[][]): DungeonData {\r\n    const maskRowRatio = mask.length / (dungeonData.n_rows + 1);\r\n    const maskColRatio = mask[0].length / (dungeonData.n_cols + 1);\r\n\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        const maskRow = mask[Math.floor(row * maskRowRatio)];\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            if (!maskRow[Math.floor(col * maskColRatio)]) {\r\n                dungeonData.cell[row][col] = 1; // Mark as wall\r\n            }\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction ya(dungeonData: DungeonData): DungeonData {\r\n    const quarterRows = Math.floor(dungeonData.n_rows / 4);\r\n\r\n    for (let offset = 0; offset < quarterRows; offset++) {\r\n        const rowStart = quarterRows + offset;\r\n        const rowEnd = dungeonData.n_cols - offset;\r\n\r\n        for (let col = rowStart; col <= rowEnd; col++) {\r\n            dungeonData.cell[offset][col] = 1; // Top-left to bottom-right\r\n            dungeonData.cell[dungeonData.n_rows - offset][col] = 1; // Bottom-left to top-right\r\n            dungeonData.cell[col][offset] = 1; // Top-left to bottom-right\r\n            dungeonData.cell[col][dungeonData.n_cols - offset] = 1; // Bottom-left to top-right\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction za(dungeonData: DungeonData): DungeonData {\r\n    const midRow = Math.floor(dungeonData.n_rows / 2);\r\n\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        const hexOffset = Math.floor(0.57735 * Math.abs(row - midRow)) + 1;\r\n        const colStart = hexOffset;\r\n        const colEnd = dungeonData.n_cols - hexOffset;\r\n\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            if (col < colStart || col > colEnd) {\r\n                dungeonData.cell[row][col] = 1; // Mark as wall\r\n            }\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction Aa(dungeonData: DungeonData): DungeonData {\r\n    const midRow = dungeonData.n_rows / 2;\r\n    const midCol = dungeonData.n_cols / 2;\r\n\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        const rowRatio = Math.pow(row / midRow - 1, 2);\r\n\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            const colRatio = Math.pow(col / midCol - 1, 2);\r\n            if (Math.sqrt(rowRatio + colRatio) > 1) {\r\n                dungeonData.cell[row][col] = 1; // Mark as wall\r\n            }\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nexport function calculateDungeonDimensions(\r\n    dungeonData: DungeonData,\r\n    dungeonSize: string, // Pass dungeon_size as a parameter\r\n    dungeonLayout: string // Pass dungeon_layout as a parameter\r\n): DungeonData {\r\n    // Lookup dungeon size and layout from DungeonSettings\r\n    const dungeonSizeConfig = DungeonSettings.dungeon_size[dungeonSize];\r\n    const layoutConfig = DungeonSettings.dungeon_layout[dungeonLayout];\r\n\r\n    // Calculate dimensions\r\n    const cellSize = dungeonSizeConfig.cell;\r\n    const dungeonArea = dungeonSizeConfig.size;\r\n    const aspectRatio = layoutConfig.aspect;\r\n\r\n    dungeonData.n_i = Math.floor((dungeonArea * aspectRatio) / cellSize);\r\n    dungeonData.n_j = Math.floor(dungeonArea / cellSize);\r\n    dungeonData.cell_size = cellSize;\r\n    dungeonData.n_rows = 2 * dungeonData.n_i;\r\n    dungeonData.n_cols = 2 * dungeonData.n_j;\r\n    dungeonData.max_row = dungeonData.n_rows - 1;\r\n    dungeonData.max_col = dungeonData.n_cols - 1;\r\n\r\n    // Initialize the cell array\r\n    dungeonData.cell = [];\r\n    for (let i = 0; i <= dungeonData.n_rows; i++) {\r\n        dungeonData.cell[i] = [];\r\n        for (let j = 0; j <= dungeonData.n_cols; j++) {\r\n            dungeonData.cell[i][j] = 0;\r\n        }\r\n    }\r\n\r\n    // Apply dungeon layout masks\r\n    if (layoutConfig.mask) {\r\n        dungeonData = xa(dungeonData, layoutConfig.mask);\r\n    } else if (dungeonLayout === \"saltire\") {\r\n        dungeonData = ya(dungeonData);\r\n    } else if (dungeonLayout === \"hexagon\") {\r\n        dungeonData = za(dungeonData);\r\n    } else if (dungeonLayout === \"round\") {\r\n        dungeonData = Aa(dungeonData);\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction generateDenseRooms(dungeonData: DungeonData, roomConfig: RoomConfig, totalRooms: number): DungeonData {\r\n    let roomsGenerated = 0;\r\n\r\n    for (let i = 0; i < dungeonData.n_i; i++) {\r\n        for (let j = 0; j < dungeonData.n_j; j++) {\r\n            if (roomsGenerated >= totalRooms) {\r\n                return dungeonData; // Stop if we've reached the desired number of rooms\r\n            }\r\n\r\n            const cellRow = 2 * i + 1;\r\n            const cellCol = 2 * j + 1;\r\n\r\n            if (!(dungeonData.cell[cellRow][cellCol] & 2) && (i === 0 || j === 0 || random(2) > 0)) {\r\n                dungeonData = createRoom(dungeonData, roomConfig, { i, j });\r\n                roomsGenerated++;\r\n\r\n                if (roomConfig.huge_rooms && !(dungeonData.cell[cellRow][cellCol] & 2)) {\r\n                    dungeonData = createRoom(dungeonData, roomConfig, { i, j, size: \"medium\" });\r\n                    roomsGenerated++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction generateScatteredRooms(dungeonData: DungeonData, roomConfig: RoomConfig, totalRooms: number): DungeonData {\r\n    for (let i = 0; i < totalRooms; i++) {\r\n        dungeonData = createRoom(dungeonData, roomConfig, { size: roomConfig.size }); // Pass room_size\r\n    }\r\n\r\n    if (roomConfig.huge_rooms) {\r\n        const mediumRoomCount = Math.floor(totalRooms / 2); // Example: Half of total rooms are huge\r\n        for (let i = 0; i < mediumRoomCount; i++) {\r\n            dungeonData = createRoom(dungeonData, roomConfig, { size: \"medium\" });\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nexport function generateDoors(dungeonData: DungeonData): DungeonData {\r\n    const doorConnections: { [key: string]: number } = {};\r\n\r\n    Object.entries(dungeonData.room).forEach(([roomId, room]) => {\r\n        console.log(`Processing room with ID: ${roomId}`, room);\r\n\r\n        const doors = attemptDoorPlacement(dungeonData, room);\r\n        console.log(\"Doors found for room:\", roomId, doors);\r\n\r\n        if (!doors.length) {\r\n            console.log(\"No doors found for this room.\");\r\n            return; // Skip this room if there are no doors\r\n        }\r\n\r\n        const roomArea = Math.sqrt(((room.east - room.west) / 2 + 1) * ((room.south - room.north) / 2 + 1));\r\n        const doorCount = Math.floor(roomArea + random(roomArea));\r\n\r\n        for (let i = 0; i < doorCount; i++) {\r\n            const door = doors.splice(random(doors.length), 1)[0];\r\n            if (!door) break;\r\n\r\n            const doorWithAllProperties = {\r\n                doorRowIndex: door.door_r,\r\n                doorColIndex: door.door_c,\r\n                sill_r: door.sill_r!,\r\n                sill_c: door.sill_c!,\r\n                dir: door.dir!,\r\n                out_id: door.out_id !== undefined ? door.out_id : undefined,\r\n                door_type: (dungeonData as any).door_type || 'Standard',\r\n            };\r\n\r\n            if (!(dungeonData.cell[doorWithAllProperties.doorRowIndex][doorWithAllProperties.doorColIndex] & 4128769) && // Ensure it's not already a door or stair\r\n                dungeonData.cell[doorWithAllProperties.doorRowIndex][doorWithAllProperties.doorColIndex] & 16) { // Ensure it's a wall\r\n                if (doorWithAllProperties.out_id) {\r\n                    const connectionKey = [room.id, doorWithAllProperties.out_id].sort().join(\",\");\r\n                    if (!doorConnections[connectionKey]) {\r\n                        dungeonData = da(dungeonData, room, doorWithAllProperties);\r\n                        doorConnections[connectionKey] = 1;\r\n                    }\r\n                } else {\r\n                    dungeonData = da(dungeonData, room, doorWithAllProperties);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction labelRooms(dungeonData: DungeonData): DungeonData {\r\n    Object.entries(dungeonData.room).forEach(([roomId, room]) => {\r\n        console.warn(`Processing room with ID: ${roomId}`, room);\r\n\r\n        const roomIdStr = room.id.toString();\r\n        const roomIdLength = roomIdStr.length;\r\n\r\n        const centerRow = Math.floor((room.north + room.south) / 2);\r\n        const centerCol = Math.floor((room.west + room.east - roomIdLength) / 2) + 1;\r\n\r\n        // Log room boundaries and center position\r\n        console.warn(`Room ID: ${roomIdStr}, North: ${room.north}, South: ${room.south}, West: ${room.west}, East: ${room.east}`);\r\n        console.warn(`Center Row: ${centerRow}, Center Col: ${centerCol}`);\r\n\r\n        // Ensure the center position is within bounds\r\n        if (centerRow < 0 || centerRow >= dungeonData.n_rows || centerCol < 0 || centerCol >= dungeonData.n_cols) {\r\n            console.error(`Invalid center position for room ${room.id}: (${centerRow}, ${centerCol})`);\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < roomIdLength; i++) {\r\n            const labelChar = roomIdStr.charAt(i);\r\n            const labelCode = labelChar.charCodeAt(0);\r\n\r\n            // Ensure the cell is within bounds\r\n            if (centerCol + i >= dungeonData.n_cols) {\r\n                console.error(`Label character \"${labelChar}\" at (${centerRow}, ${centerCol + i}) is out of bounds`);\r\n                continue;\r\n            }\r\n\r\n            // Assign the label\r\n            dungeonData.cell[centerRow][centerCol + i] |= labelCode << 24;\r\n        }\r\n    });\r\n\r\n    return dungeonData;\r\n}\r\n\r\nlet sortedDirections = Object.keys(M).sort();\r\nfunction invertDirection(dir: DirectionKey): DirectionKey {\r\n    switch (dir) {\r\n        case \"north\":\r\n            return \"south\";\r\n        case \"south\":\r\n            return \"north\";\r\n        case \"west\":\r\n            return \"east\";\r\n        case \"east\":\r\n            return \"west\";\r\n        default:\r\n            throw new Error(\"Invalid direction\");\r\n    }\r\n}\r\n\r\nfunction Ba(\r\n    config: { straight_pct?: number }, // Accept straight_pct as part of config\r\n    currentDirection?: DirectionKey\r\n): DirectionKey[] {\r\n    const directions = Object.keys(M) as DirectionKey[];\r\n\r\n    // Shuffle the directions\r\n    for (let i = directions.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [directions[i], directions[j]] = [directions[j], directions[i]];\r\n    }\r\n\r\n    // Prioritize the current direction if straight_pct is set\r\n    if (currentDirection && config.straight_pct && Math.random() * 100 < config.straight_pct) {\r\n        directions.unshift(currentDirection);\r\n    }\r\n\r\n    return directions;\r\n}\r\n\r\nexport function N(a: number, b: number): number {\r\n    return a - b;\r\n}\r\n\r\nfunction ea(\r\n    dungeonData: DungeonData,\r\n    row: number,\r\n    col: number,\r\n    direction: DirectionKey,\r\n    straight_pct: number // Pass straight_pct as a parameter\r\n): DungeonData {\r\n    const directions = Ba({ straight_pct }, direction); // Pass straight_pct to Ba\r\n    console.log(`Generating corridors in directions: ${directions.join(\", \")}`);\r\n\r\n    directions.forEach((dir: DirectionKey) => {\r\n        const nextRow = row + P[dir];\r\n        const nextCol = col + M[dir];\r\n\r\n        // Check if the next cell is within bounds\r\n        if (\r\n            nextRow >= 0 &&\r\n            nextRow <= dungeonData.n_rows &&\r\n            nextCol >= 0 &&\r\n            nextCol <= dungeonData.n_cols\r\n        ) {\r\n            // Check if the next cell is not a wall or corridor\r\n            if (!(dungeonData.cell[nextRow][nextCol] & 6)) {\r\n                // Mark the cell as a corridor\r\n                dungeonData.cell[nextRow][nextCol] |= 4;\r\n                console.log(`Marked cell (${nextRow}, ${nextCol}) as corridor`);\r\n\r\n                // Recursively call ea to continue generating corridors\r\n                dungeonData = ea(dungeonData, nextRow, nextCol, dir, straight_pct);\r\n            }\r\n        }\r\n    });\r\n\r\n    return dungeonData;\r\n}\r\n\r\nexport function generateCorridors(dungeonData: DungeonData): DungeonData {\r\n    const corridorLayout = lookupAtIndex(\"corridor_layout\", (dungeonData as any).corridor_layout || \"straight\");\r\n    const straight_pct = corridorLayout.pct; // Get straight_pct from corridor_layout\r\n\r\n    console.log(\"Starting corridor generation...\");\r\n\r\n    // Recursive function to generate corridors in a specific direction\r\n    function generateCorridorRecursive(\r\n        dungeonData: DungeonData,\r\n        row: number,\r\n        col: number,\r\n        direction?: DirectionKey,\r\n        visited: Set<string> = new Set()\r\n    ): DungeonData {\r\n        const cellKey = `${row},${col}`;\r\n        if (visited.has(cellKey)) {\r\n            return dungeonData; // Skip if already visited\r\n        }\r\n        visited.add(cellKey);\r\n\r\n        const directions = shuffleDirections(dungeonData, direction, straight_pct);\r\n        //console.log(`Processing cell: (${row}, ${col}), directions: ${directions.join(\", \")}`);\r\n\r\n        directions.forEach((dir: DirectionKey) => {\r\n            const nextRow = row + P[dir];\r\n            const nextCol = col + M[dir];\r\n\r\n            // Check if the next cell is within bounds\r\n            if (\r\n                nextRow >= 0 && nextRow <= dungeonData.n_rows &&\r\n                nextCol >= 0 && nextCol <= dungeonData.n_cols\r\n            ) {\r\n                //console.log(`Checking next cell: (${nextRow}, ${nextCol}), cell value: ${dungeonData.cell[nextRow][nextCol]}`);\r\n\r\n                // Check if the next cell is not a wall or room\r\n                if (!(dungeonData.cell[nextRow][nextCol] & 6)) {\r\n                    // Mark the cell as a corridor\r\n                    //console.log(`Marking cell (${nextRow}, ${nextCol}) as corridor`);\r\n                    dungeonData.cell[nextRow][nextCol] |= 4;\r\n\r\n                    // Add walls around corridors\r\n                    for (let row = 1; row < dungeonData.n_rows; row++) {\r\n                        for (let col = 1; col < dungeonData.n_cols; col++) {\r\n                            if (dungeonData.cell[row][col] & 4) { // Check if it's a corridor\r\n                                // Add walls around the corridor cell\r\n                                for (let dr = -1; dr <= 1; dr++) {\r\n                                    for (let dc = -1; dc <= 1; dc++) {\r\n                                        if (dr === 0 && dc === 0) continue; // Skip the corridor cell itself\r\n                                        const newRow = row + dr;\r\n                                        const newCol = col + dc;\r\n                                        // Ensure the cell is not already a wall, room, or corridor\r\n                                        if (!(dungeonData.cell[newRow][newCol] & 6)) { // must be empty\r\n                                            dungeonData.cell[newRow][newCol] |= 16; // Mark as wall\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Recursively extend the corridor in the current direction\r\n                    dungeonData = generateCorridorRecursive(dungeonData, nextRow, nextCol, dir, visited);\r\n                }\r\n            } else {\r\n                //console.log(`Skipping out-of-bounds cell: (${nextRow}, ${nextCol})`);\r\n            }\r\n        });\r\n\r\n        return dungeonData;\r\n    }\r\n\r\n    // Shuffle directions and prioritize the current direction if straight_pct is set\r\n    function shuffleDirections(\r\n        dungeonData: DungeonData,\r\n        currentDirection?: DirectionKey,\r\n        straight_pct?: number\r\n    ): DirectionKey[] {\r\n        const directions = Object.keys(M) as DirectionKey[];\r\n\r\n        // Shuffle the directions\r\n        for (let i = directions.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [directions[i], directions[j]] = [directions[j], directions[i]];\r\n        }\r\n\r\n        // Prioritize the current direction if straight_pct is set\r\n        if (currentDirection && straight_pct && Math.random() * 100 < straight_pct) {\r\n            directions.unshift(currentDirection);\r\n        }\r\n\r\n        return directions;\r\n    }\r\n\r\n    // Start corridor generation from the edges of each room\r\n    Object.values(dungeonData.room).forEach((room: Room) => {\r\n        // Start from one cell outside the north edge of the room\r\n        const startRow = room.north - 1;\r\n        const startCol = Math.floor((room.west + room.east) / 2);\r\n\r\n        if (!(dungeonData.cell[startRow][startCol] & 6)) { // Ensure it's not a wall or room\r\n            dungeonData = generateCorridorRecursive(dungeonData, startRow, startCol);\r\n        }\r\n\r\n        // Start from one cell outside the south edge of the room\r\n        const endRow = room.south + 1;\r\n        const endCol = Math.floor((room.west + room.east) / 2);\r\n\r\n        if (!(dungeonData.cell[endRow][endCol] & 6)) { // Ensure it's not a wall or room\r\n            dungeonData = generateCorridorRecursive(dungeonData, endRow, endCol);\r\n        }\r\n\r\n        // Start from one cell outside the west edge of the room\r\n        const westRow = Math.floor((room.north + room.south) / 2);\r\n        const westCol = room.west - 1;\r\n\r\n        if (!(dungeonData.cell[westRow][westCol] & 6)) { // Ensure it's not a wall or room\r\n            dungeonData = generateCorridorRecursive(dungeonData, westRow, westCol);\r\n        }\r\n\r\n        // Start from one cell outside the east edge of the room\r\n        const eastRow = Math.floor((room.north + room.south) / 2);\r\n        const eastCol = room.east + 1;\r\n\r\n        if (!(dungeonData.cell[eastRow][eastCol] & 6)) { // Ensure it's not a wall or room\r\n            dungeonData = generateCorridorRecursive(dungeonData, eastRow, eastCol);\r\n        }\r\n    });\r\n\r\n    console.log(\"Corridor generation complete.\");\r\n    printDungeon(dungeonData); // Print the dungeon grid after corridors are generated\r\n    return dungeonData;\r\n}\r\n\r\nfunction finalizeDungeonLayout(dungeonData: DungeonData): DungeonData {\r\n    for (let i = 0; i <= dungeonData.n_rows; i++) {\r\n        for (let j = 0; j <= dungeonData.n_cols; j++) {\r\n            if (dungeonData.cell[i][j] & 1) {\r\n                dungeonData.cell[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n    return dungeonData;\r\n}\r\n\r\nfunction ja(grid: number[][], row: number, col: number, directionDetails: DirectionDetails): boolean {\r\n    let isValid = true;\r\n\r\n    // Check for corridors\r\n    if (directionDetails.corridor) {\r\n        for (const offset of directionDetails.corridor) {\r\n            const cellRow = row + offset[0];\r\n            const cellCol = col + offset[1];\r\n\r\n            // Skip out-of-bounds cells\r\n            if (cellRow < 0 || cellRow >= grid.length || cellCol < 0 || cellCol >= grid[0].length) {\r\n                continue;\r\n            }\r\n\r\n            // Check if the cell is a corridor\r\n            if (!(grid[cellRow][cellCol] & 4)) {\r\n                //console.log(`Cell (${cellRow}, ${cellCol}) is not a corridor`);\r\n                isValid = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check for walls\r\n    if (directionDetails.walled) {\r\n        for (const offset of directionDetails.walled) {\r\n            const cellRow = row + offset[0];\r\n            const cellCol = col + offset[1];\r\n\r\n            // Skip out-of-bounds cells\r\n            if (cellRow < 0 || cellRow >= grid.length || cellCol < 0 || cellCol >= grid[0].length) {\r\n                continue;\r\n            }\r\n\r\n            // Check if the cell is a wall\r\n            if (!(grid[cellRow][cellCol] & 16)) {\r\n                //console.log(`Cell (${cellRow}, ${cellCol}) is not a wall`);\r\n                isValid = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check for stairs\r\n    if (directionDetails.stair) {\r\n        const cellRow = row + directionDetails.stair[0];\r\n        const cellCol = col + directionDetails.stair[1];\r\n\r\n        if (cellRow < 0 || cellRow >= grid.length || cellCol < 0 || cellCol >= grid[0].length) {\r\n            isValid = false;\r\n        } else if (grid[cellRow][cellCol] & 12582912) { // Check if cell is already marked as stairs\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nfunction oa(dungeonData: DungeonData): Stair[] {\r\n    const cell = dungeonData.cell;\r\n    const stairs: Stair[] = [];\r\n\r\n    console.log(\"Starting stair placement search...\");\r\n\r\n    for (let row = 0; row < dungeonData.n_i; row++) {\r\n        const cellRow = 2 * row + 1;\r\n        for (let col = 0; col < dungeonData.n_j; col++) {\r\n            const cellCol = 2 * col + 1;\r\n\r\n            // Check if the cell is a corridor and not already marked as stairs\r\n            if (cell[cellRow][cellCol] & 4 && !(cell[cellRow][cellCol] & 12582912)) {\r\n                console.log(`Found corridor at (${cellRow}, ${cellCol})`);\r\n\r\n                // Check all directions for valid stair placement\r\n                Object.keys(DirectionConfig).forEach((direction) => {\r\n                    //console.log(`Checking direction: ${direction} at (${cellRow}, ${cellCol})`);\r\n\r\n                    // Validate stair placement using DirectionConfig\r\n                    if (ja(cell, cellRow, cellCol, DirectionConfig[direction])) {\r\n                        //console.log(`Valid stair placement at (${cellRow}, ${cellCol}) in direction ${direction}`);\r\n\r\n                        // Create a stair object\r\n                        const stair: Stair = {\r\n                            row: cellRow,\r\n                            col: cellCol,\r\n                            next_row: cellRow + DirectionConfig[direction].next[0],\r\n                            next_col: cellCol + DirectionConfig[direction].next[1],\r\n                        };\r\n\r\n                        // Add the stair to the list\r\n                        stairs.push(stair);\r\n                    } else {\r\n                        //console.log(`Invalid stair placement at (${cellRow}, ${cellCol}) in direction ${direction}`);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(`Potential stairs found in oa: ${stairs.length}`);\r\n    return stairs;\r\n}\r\nexport function generateStairs(dungeonData: DungeonData, userSettings: UserSettings): DungeonData {\r\n    if (!userSettings.add_stairs || userSettings.add_stairs === 'no') {\r\n        console.error(\"No stairs to be generated, either intentionally or by code error.\");\r\n        return dungeonData;\r\n    }\r\n\r\n    // Get potential stair positions\r\n    const stairPositions = oa(dungeonData);\r\n\r\n    if (!stairPositions.length) {\r\n        console.error(\"oa not returning valid stair positions.\");\r\n        return dungeonData;\r\n    }\r\n\r\n    // Determine the number of stairs to place\r\n    let numStairs = 0;\r\n    if ((dungeonData as any).add_stairs === 'many') {\r\n        numStairs = 3 + random(Math.floor(dungeonData.n_cols * dungeonData.n_rows / 1000));\r\n    } else if ((dungeonData as any).add_stairs === 'yes') {\r\n        numStairs = 2;\r\n    }\r\n\r\n    // Place the stairs\r\n    const stairs: Stair[] = [];\r\n    for (let i = 0; i < numStairs; i++) {\r\n        const stair = stairPositions.splice(random(stairPositions.length), 1)[0];\r\n        if (!stair) break;\r\n\r\n        const { row, col } = stair;\r\n\r\n        // Ensure the cell is not already a door or part of a room\r\n        if (dungeonData.cell[row][col] & 4128769 || dungeonData.cell[row][col] & 2) {\r\n            console.warn(`Cannot place stair at (${row}, ${col}) - cell is occupied by a door or room.`);\r\n            continue; // Skip this stair position\r\n        }\r\n\r\n        // Randomly assign the stair type (up or down)\r\n        if (random(2) < 1) {\r\n            dungeonData.cell[row][col] |= 4194304; // Down stair\r\n            stair.key = 'down'; // Use `key` instead of `dir`\r\n        } else {\r\n            dungeonData.cell[row][col] |= 8388608; // Up stair\r\n            stair.key = 'up'; // Use `key` instead of `dir`\r\n        }\r\n\r\n        stairs.push(stair);\r\n        console.log(`Placing ${stair.key} stair at (${row}, ${col})`); // Debugging\r\n    }\r\n\r\n    if (stairs.length === 0) {\r\n        console.warn(\"No stairs were generated.\");\r\n    }\r\n\r\n    // Update the dungeon data with the placed stairs\r\n    (dungeonData as any).stair = stairs;\r\n    return dungeonData;\r\n}\r\n\r\nfunction ha(dungeonData: DungeonData, closeArcs: number): DungeonData {\r\n    return fa(dungeonData, closeArcs, DirectionConfig); // Use DirectionConfig.north as an example\r\n}\r\n\r\nfunction ka(dungeonData: DungeonData, row: number, col: number, directionConfig: typeof DirectionConfig): DungeonData {\r\n    const cell = dungeonData.cell;\r\n\r\n    // Iterate over each direction in DirectionConfig\r\n    for (const direction of Object.keys(directionConfig) as Array<keyof typeof directionConfig>) {\r\n        const config = directionConfig[direction];\r\n\r\n        // Check if the cell can be processed in this direction\r\n        if (ja(cell, row, col, config)) {\r\n            // Close cells if specified in the configuration\r\n            if (config.close) {\r\n                for (const [dr, dc] of config.close) {\r\n                    cell[row + dr][col + dc] = 0;\r\n                }\r\n            }\r\n\r\n            // Open cells if specified in the configuration\r\n            if (config.open) {\r\n                const [dr, dc] = config.open;\r\n                cell[row + dr][col + dc] |= 4; // Mark as corridor\r\n            }\r\n\r\n            // Recurse if specified in the configuration\r\n            if (config.recurse) {\r\n                const [dr, dc] = config.recurse;\r\n                dungeonData = ka(dungeonData, row + dr, col + dc, directionConfig);\r\n            }\r\n        }\r\n    }\r\n\r\n    dungeonData.cell = cell;\r\n    return dungeonData;\r\n}\r\n\r\nfunction fa(dungeonData: DungeonData, closeArcs: number, directionConfig: typeof DirectionConfig): DungeonData {\r\n    const shouldCloseAll = closeArcs === 100; // Close all arcs if closeArcs is 100\r\n\r\n    for (let i = 0; i < dungeonData.n_i; i++) {\r\n        const row = 2 * i + 1;\r\n        for (let j = 0; j < dungeonData.n_j; j++) {\r\n            const col = 2 * j + 1;\r\n\r\n            // Check if the cell is a corridor or room and not already marked as a stair or door\r\n            if ((dungeonData.cell[row][col] & 6) && !(dungeonData.cell[row][col] & 12582912)) {\r\n                // Randomly decide whether to process the cell based on closeArcs percentage\r\n                if (shouldCloseAll || Math.random() * 100 < closeArcs) {\r\n                    dungeonData = ka(dungeonData, row, col, directionConfig);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction getUserSettings(): UserSettings {\r\n    return {\r\n        map_style: $(\"#map_style\").val() as string,\r\n        grid: $(\"#grid\").val() as string,\r\n        dungeon_layout: $(\"#dungeon_layout\").val() as string,\r\n        dungeon_size: $(\"#dungeon_size\").val() as string,\r\n        add_stairs: $(\"#add_stairs\").val() as string,\r\n        room_layout: $(\"#room_layout\").val() as string,\r\n        room_size: $(\"#room_size\").val() as string,\r\n        doors: $(\"#doors\").val() as string,\r\n        corridor_layout: $(\"#corridor_layout\").val() as string,\r\n        remove_deadends: $(\"#remove_deadends\").val() as string,\r\n    };\r\n}\r\n\r\nfunction qaFinalizeDoors(dungeonData: DungeonData, doors: Door[]): DungeonData {\r\n    let b: Record<string, boolean> = {};\r\n\r\n    // Convert the `room` object into an array of its values\r\n    Object.values(dungeonData.room).forEach((d: Room) => {\r\n        console.log('Processing room:', d); // Log the room object\r\n        if (!d) {\r\n            console.error('Room is undefined:', d);\r\n            return;\r\n        }\r\n        if (!d.door) {\r\n            console.error('Room.door is undefined:', d);\r\n            return;\r\n        }\r\n\r\n        let g = d.id;\r\n        (Object.keys(Direction) as DirectionKey[]).forEach((c: DirectionKey) => {\r\n            console.log('Processing direction:', c); // Log the direction\r\n            if (!d.door[c]) {\r\n                d.door[c] = []; // Initialize as an empty array\r\n            }\r\n\r\n            let e: Door[] = [];\r\n            d.door[c].forEach((h: Door) => {\r\n                let k: string = [h.row, h.col].join();\r\n                if (dungeonData.cell[h.row][h.col] & 6) {\r\n                    if (b[k]) {\r\n                        e.push(h);\r\n                    } else {\r\n                        if (h.out_id !== undefined) { // Check if out_id is defined\r\n                            const targetRoomId = h.out_id; // Directly use the number\r\n                            if (targetRoomId && dungeonData.room[targetRoomId]) { // Validate targetRoomId\r\n                                let t = dungeonData.room[targetRoomId]; // Get the room using the room ID\r\n                                let z = invertDirection(c); // Get the inverted direction\r\n                                h.out_id = targetRoomId; // Update h.out_id (now a number)\r\n                                if (!t.door[z]) {\r\n                                    t.door[z] = []; // Initialize as an empty array\r\n                                }\r\n                                t.door[z].push(h); // Add the door to the corresponding room\r\n                            } else {\r\n                                console.warn(`Target room with ID ${targetRoomId} not found in a.room. Skipping door.`);\r\n                            }\r\n                        } else {\r\n                            console.warn(`Invalid out_id for door at (${h.row}, ${h.col}). Skipping door.`);\r\n                        }\r\n                        e.push(h);\r\n                        b[k] = true;\r\n                    }\r\n                }\r\n            });\r\n            e.length ? (d.door[c] = e) : (d.door[c] = []);\r\n            doors = doors.concat(e);\r\n        });\r\n    });\r\n\r\n    // Return the updated DungeonData without modifying its structure\r\n    return dungeonData;\r\n}\r\n\r\nexport function removeDeadEnds(\r\n    dungeonData: DungeonData,\r\n    removeDeadEndsSetting: string, // Pass remove_deadends setting\r\n    corridorLayoutSetting: string // Pass corridor_layout setting\r\n): DungeonData {\r\n    // Look up the corresponding configuration from DungeonSettings\r\n    const removeDeadEndsConfig = DungeonSettings.remove_deadends[removeDeadEndsSetting];\r\n\r\n    // Ensure the configuration exists and has a valid pct value\r\n    if (!removeDeadEndsConfig || typeof removeDeadEndsConfig.pct !== 'number') {\r\n        console.error('Invalid remove_deadends configuration:', removeDeadEndsConfig);\r\n        return dungeonData; // Return the original data if the configuration is invalid\r\n    }\r\n\r\n    // Assign the pct value to close_arcs\r\n    const closeArcs = removeDeadEndsConfig.pct;\r\n\r\n    // Process the dungeon data to remove dead ends\r\n    dungeonData = fa(dungeonData, closeArcs, DirectionConfig);\r\n\r\n    // Detect and reroute dead-end corridors\r\n    for (let i = 1; i < dungeonData.n_rows; i++) {\r\n        for (let j = 1; j < dungeonData.n_cols; j++) {\r\n            if (dungeonData.cell[i][j] & 4) { // Check if it's a corridor\r\n                let connections = 0;\r\n                if (dungeonData.cell[i - 1][j] & 4) connections++; // North\r\n                if (dungeonData.cell[i + 1][j] & 4) connections++; // South\r\n                if (dungeonData.cell[i][j - 1] & 4) connections++; // West\r\n                if (dungeonData.cell[i][j + 1] & 4) connections++; // East\r\n\r\n                if (connections === 1) { // Dead-end detected\r\n                    const directions = [\r\n                        { row: i - 1, col: j }, // North\r\n                        { row: i + 1, col: j }, // South\r\n                        { row: i, col: j - 1 }, // West\r\n                        { row: i, col: j + 1 }, // East\r\n                    ];\r\n\r\n                    for (const dir of directions) {\r\n                        if (dungeonData.cell[dir.row][dir.col] === 0) {\r\n                            dungeonData.cell[dir.row][dir.col] = 4; // Extend corridor\r\n                            break; // Stop after extending in one direction\r\n                        }\r\n                    }\r\n\r\n                    if (dungeonData.cell[i][j] & 4 && connections === 1) {\r\n                        dungeonData.cell[i][j] = 0; // Remove the dead-end corridor if no extension is possible\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Apply additional logic based on corridor_layout\r\n    if (corridorLayoutSetting === 'errant' || corridorLayoutSetting === 'straight') {\r\n        dungeonData = ha(dungeonData, closeArcs); // Pass closeArcs to ha\r\n    }\r\n\r\n    // Initialize doors array if not already initialized\r\n    const doors: Door[] = (dungeonData as any).door || [];\r\n\r\n    // Finalize doors\r\n    dungeonData = qaFinalizeDoors(dungeonData, doors);\r\n\r\n    // Clean up walls\r\n    for (let l = 0; l <= dungeonData.n_rows; l++) {\r\n        for (let q = 0; q <= dungeonData.n_cols; q++) {\r\n            if (dungeonData.cell[l][q] & 1) {\r\n                dungeonData.cell[l][q] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\ninterface DungeonRenderSettings {\r\n    mapStyle: string; // Map style (e.g., 'standard', 'classic', 'graph')\r\n    gridStyle: string; // Grid style (e.g., 'none', 'square', 'hex', 'vex')\r\n    cellSize: number; // Cell size in pixels\r\n    max_x: number; // Maximum X coordinate\r\n    max_y: number; // Maximum Y coordinate\r\n    font: string; // Font settings for rendering text\r\n    cell_size: number; // Cell size in pixels (required by DungeonRenderSettings)\r\n    palette: any; // Palette settings (required by DungeonRenderSettings)\r\n    grid: any; // Grid settings (required by DungeonRenderSettings)\r\n    base_layer: any; // Base layer settings (required by DungeonRenderSettings)\r\n}\r\n\r\n/**\r\n * Retrieves a color from the palette based on the given key.\r\n * @param palette - The palette object containing color mappings.\r\n * @param key - The key for the color to retrieve.\r\n * @returns The color associated with the key, or a default color if not found.\r\n */\r\nexport function getPaletteColor(palette: Palette, key: PaletteKey): string {\r\n    // Check if the key exists directly in the palette\r\n    if (palette[key]) {\r\n        return palette[key];\r\n    }\r\n\r\n    // Use fallback mechanism (if any)\r\n    const fallbackKey = Ea[key];\r\n    if (fallbackKey && palette[fallbackKey]) {\r\n        return palette[fallbackKey];\r\n    }\r\n\r\n    // Default to black if no color is found\r\n    return '#000000';\r\n}\r\n\r\n\r\nfunction drawBackground(renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D) {\r\n    const { cell_size, palette, base_layer, max_x, max_y, font } = renderSettings;\r\n\r\n    // Draw the background (black fill)\r\n    const fillColor = palette.fill || palette.black || '#000000';\r\n    fill_rect(canvasContext, 0, 0, max_x!, max_y!, fillColor);\r\n}\r\n\r\nfunction drawGrid(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n    const { cell_size, palette, base_layer, max_x, max_y, font } = renderSettings;\r\n    const gridColor = palette.grid || palette.open_grid || '#cccccc';\r\n    if (gridColor) {\r\n        for (let x = 0; x <= max_x!; x += cell_size) {\r\n            draw_line(canvasContext, x, 0, x, max_y!, gridColor);\r\n        }\r\n        for (let y = 0; y <= max_y!; y += cell_size) {\r\n            draw_line(canvasContext, 0, y, max_x!, y, gridColor);\r\n        }\r\n    }\r\n}\r\n\r\n// function drawRooms(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n//     const { cell_size, palette, base_layer, max_x, max_y, font } = renderSettings;\r\n//     const roomColor = palette.open || '#ffffff'; // Default to white if no color is set\r\n//     for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n//         for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n//             if (dungeonData.cell[row][col] & 2) { // Check if it's a room\r\n//                 const x = col * cell_size;\r\n//                 const y = row * cell_size;\r\n//                 //canvasContext.drawImage(base_layer, x, y, cell_size, cell_size, x, y, cell_size, cell_size);\r\n//                 fill_rect(canvasContext, x, y, cell_size, cell_size, roomColor);\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\nfunction drawRooms(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n    const { cell_size, palette, base_layer, max_x, max_y, font } = renderSettings;\r\n    const roomColor = palette.open || '#ffffff'; // Default to white if no color is set\r\n    // Debug: Log grid dimensions\r\n    console.log(`Grid Dimensions: Rows: ${dungeonData.n_rows}, Cols: ${dungeonData.n_cols}`);\r\n\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            // Debug: Log cell value and position\r\n            console.log(`Row: ${row}, Col: ${col}, Cell Value: ${dungeonData.cell[row][col]}`);\r\n\r\n            // Check if the cell is a room (value 2)\r\n            if (dungeonData.cell[row][col] & 2) {\r\n                const x = col * cell_size;\r\n                const y = row * cell_size;\r\n\r\n                // Debug: Log drawing coordinates\r\n                console.log(`Drawing room at (${x}, ${y})`);\r\n\r\n                // Draw the room cell\r\n                //canvasContext.drawImage(base_layer, x, y, cell_size, cell_size, x, y, cell_size, cell_size);\r\n                fill_rect(canvasContext, x, y, cell_size, cell_size, roomColor);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Draw labels (room IDs)\r\nfunction drawLabels(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n    const { cell_size, palette, font } = renderSettings;\r\n    const labelColor = palette.label || '#000000'; // Default to black if no color is set\r\n\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            const cellValue = dungeonData.cell[row][col];\r\n            const roomId = (cellValue >> 6) & 255; // Decode room ID\r\n\r\n            // Ensure the room ID is a printable ASCII character (32–126)\r\n            if (roomId >= 32 && roomId <= 126) {\r\n                const labelChar = String.fromCharCode(roomId);\r\n                const x = col * cell_size + cell_size / 2;\r\n                const y = row * cell_size + cell_size / 2 + 1;\r\n                draw_string(canvasContext, labelChar, x, y, font, labelColor);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Draws wallshading and walls on the dungeon map.\r\n * @param dungeonData - The dungeon data.\r\n * @param renderSettings - The rendering settings.\r\n * @param canvasContext - The canvas rendering context.\r\n */\r\nfunction drawWallsAndShading(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n    const { cell_size, palette, base_layer, max_x, max_y, font } = renderSettings;\r\n    const wallColor = palette.wall || '#666666';\r\n    const wallShadingColor = palette.wall_shading || '#cccccc';\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            if (dungeonData.cell[row][col] & 16) { // Check if it's a wall\r\n                const x = col * cell_size;\r\n                const y = row * cell_size;\r\n\r\n                // Draw wall shading\r\n                if (wallShadingColor) {\r\n                    for (let i = x; i <= x + cell_size; i++) {\r\n                        for (let j = y; j <= y + cell_size; j++) {\r\n                            if ((i + j) % 2 !== 0) {\r\n                                set_pixel(canvasContext, i, j, wallShadingColor);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Draw walls\r\n                if (wallColor) {\r\n                    if (!(dungeonData.cell[row - 1]?.[col] & 6)) { // North wall\r\n                        draw_line(canvasContext, x, y, x + cell_size, y, wallColor);\r\n                    }\r\n                    if (!(dungeonData.cell[row][col - 1] & 6)) { // West wall\r\n                        draw_line(canvasContext, x, y, x, y + cell_size, wallColor);\r\n                    }\r\n                    if (!(dungeonData.cell[row][col + 1] & 6)) { // East wall\r\n                        draw_line(canvasContext, x + cell_size, y, x + cell_size, y + cell_size, wallColor);\r\n                    }\r\n                    if (!(dungeonData.cell[row + 1]?.[col] & 6)) { // South wall\r\n                        draw_line(canvasContext, x, y + cell_size, x + cell_size, y + cell_size, wallColor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Function to draw doors\r\nfunction drawDoors(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n    const cellSize = renderSettings.cell_size;\r\n    const doorColor = renderSettings.palette.door || '#333333';\r\n\r\n    // Iterate over all rooms to find doors\r\n    Object.values(dungeonData.room).forEach((room: Room) => {\r\n        // Iterate over all directions (north, south, east, west) in the room\r\n        (Object.keys(room.door) as DirectionKey[]).forEach((direction: DirectionKey) => {\r\n            // Iterate over all doors in the current direction\r\n            room.door[direction].forEach((door: Door) => {\r\n                const x = door.col * cellSize;\r\n                const y = door.row * cellSize;\r\n\r\n                // Draw the door based on its type\r\n                switch (door.key) {\r\n                    case 'arch':\r\n                        fill_rect(canvasContext, x, y, cellSize, cellSize, doorColor);\r\n                        break;\r\n                    case 'open':\r\n                        stroke_rect(canvasContext, x, y, cellSize, cellSize, doorColor);\r\n                        break;\r\n                    case 'lock':\r\n                        stroke_rect(canvasContext, x, y, cellSize, cellSize, doorColor);\r\n                        drawLockSymbol(canvasContext, x, y, cellSize, doorColor);\r\n                        break;\r\n                    case 'trap':\r\n                        stroke_rect(canvasContext, x, y, cellSize, cellSize, doorColor);\r\n                        drawTrapSymbol(canvasContext, x, y, cellSize, doorColor);\r\n                        break;\r\n                    case 'secret':\r\n                        stroke_rect(canvasContext, x, y, cellSize, cellSize, doorColor);\r\n                        drawSecretEffect(canvasContext, x, y, cellSize, doorColor);\r\n                        break;\r\n                    case 'portc':\r\n                        drawPortcullis(canvasContext, x, y, cellSize, doorColor);\r\n                        break;\r\n                    default:\r\n                        console.warn(`Unknown door type: ${door.key}`);\r\n                        break;\r\n                }\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\n// Function to draw stairs\r\nfunction drawStairs(dungeonData: DungeonData, renderSettings: DungeonRenderSettings, canvasContext: CanvasRenderingContext2D): void {\r\n    const { cell_size, palette } = renderSettings;\r\n    const stairColor = palette.stair || palette.wall || '#666666';\r\n\r\n    // Iterate over the dungeon grid to find stairs\r\n    for (let row = 0; row <= dungeonData.n_rows; row++) {\r\n        for (let col = 0; col <= dungeonData.n_cols; col++) {\r\n            const cellValue = dungeonData.cell[row][col];\r\n\r\n            // Check if the cell contains stairs\r\n            if (cellValue & 4194304) { // Down stair\r\n                const x = col * cell_size;\r\n                const y = row * cell_size;\r\n                draw_line(canvasContext, x + cell_size / 2, y, x + cell_size / 2, y + cell_size, stairColor);\r\n            } else if (cellValue & 8388608) { // Up stair\r\n                const x = col * cell_size;\r\n                const y = row * cell_size;\r\n                draw_line(canvasContext, x, y + cell_size / 2, x + cell_size, y + cell_size / 2, stairColor);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawLockSymbol(\r\n    canvasContext: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    cellSize: number,\r\n    color: string\r\n): void {\r\n    const lockSize = Math.floor(cellSize / 4);\r\n    const lockX = x + Math.floor(cellSize / 2) - Math.floor(lockSize / 2);\r\n    const lockY = y + Math.floor(cellSize / 2) - Math.floor(lockSize / 2);\r\n\r\n    // Draw the lock body\r\n    fill_rect(canvasContext, lockX, lockY, lockSize, lockSize, color);\r\n\r\n    // Draw the lock bolt\r\n    const boltSize = Math.floor(lockSize / 2);\r\n    const boltX = lockX + Math.floor(lockSize / 4);\r\n    const boltY = lockY - Math.floor(boltSize / 2);\r\n    fill_rect(canvasContext, boltX, boltY, boltSize, boltSize, color);\r\n}\r\n\r\nfunction drawTrapSymbol(\r\n    canvasContext: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    cellSize: number,\r\n    color: string\r\n): void {\r\n    const trapSize = Math.floor(cellSize / 4);\r\n    const trapX = x + Math.floor(cellSize / 2) - Math.floor(trapSize / 2);\r\n    const trapY = y + Math.floor(cellSize / 2) - Math.floor(trapSize / 2);\r\n\r\n    // Draw the trap base\r\n    fill_rect(canvasContext, trapX, trapY, trapSize, trapSize, color);\r\n\r\n    // Draw the trap spikes\r\n    const spikeSize = Math.floor(trapSize / 4);\r\n    const spikeX = trapX + Math.floor(trapSize / 2) - Math.floor(spikeSize / 2);\r\n    const spikeY = trapY - spikeSize;\r\n    fill_rect(canvasContext, spikeX, spikeY, spikeSize, spikeSize, color);\r\n}\r\n\r\nfunction drawSecretEffect(\r\n    canvasContext: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    cellSize: number,\r\n    color: string\r\n): void {\r\n    canvasContext.strokeStyle = color;\r\n    canvasContext.lineWidth = 2;\r\n    canvasContext.setLineDash([5, 5]); // Dashed line\r\n    canvasContext.beginPath();\r\n    canvasContext.rect(x, y, cellSize, cellSize);\r\n    canvasContext.stroke();\r\n    canvasContext.setLineDash([]); // Reset line dash\r\n}\r\n\r\nfunction drawPortcullis(\r\n    canvasContext: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    cellSize: number,\r\n    color: string\r\n): void {\r\n    const barWidth = Math.floor(cellSize / 10);\r\n    const barSpacing = Math.floor(cellSize / 5);\r\n\r\n    canvasContext.fillStyle = color;\r\n    for (let i = 0; i < 5; i++) {\r\n        const barX = x + i * barSpacing;\r\n        canvasContext.fillRect(barX, y, barWidth, cellSize);\r\n    }\r\n}\r\n\r\n// Function to calculate parameters for staircases\r\nfunction calculateStaircaseParameters(cellSize: number): {\r\n    cell: number;\r\n    len: number;\r\n    side: number;\r\n    tread: number;\r\n    down: { [key: number]: number };\r\n} {\r\n    const len = 2 * cellSize;\r\n    const side = Math.floor(cellSize / 2);\r\n    const tread = Math.floor(cellSize / 20) + 2;\r\n    const down: { [key: number]: number } = {};\r\n\r\n    for (let b = 0; b < len; b += tread) {\r\n        down[b] = Math.floor(b / len * side);\r\n    }\r\n\r\n    return { cell: cellSize, len, side, tread, down };\r\n}\r\n\r\n// Function to draw horizontal stair lines\r\nfunction drawHorizontalStairLines(stairs: { xc: number; yc?: number; side: number; list: number[] }, color: string, context: CanvasRenderingContext2D): void {\r\n    if (stairs.xc) {\r\n        const start = stairs.xc - stairs.side;\r\n        const end = stairs.xc + stairs.side;\r\n        stairs.list.forEach((position) => {\r\n            draw_line(context, start, position, end, position, color);\r\n        });\r\n    } else {\r\n        const start = stairs.yc! - stairs.side;\r\n        const end = stairs.yc! + stairs.side;\r\n        stairs.list.forEach((position) => {\r\n            draw_line(context, position, start, position, end, color);\r\n        });\r\n    }\r\n}\r\n\r\n// Function to draw vertical stair lines\r\nfunction drawVerticalStairLines(stairs: { xc?: number; yc?: number; list: number[]; down: { [key: string]: number } }, color: string, context: CanvasRenderingContext2D): void {\r\n    if (stairs.xc) {\r\n        const position = stairs.xc;\r\n        stairs.list.forEach((step: number) => {\r\n            const distance = Math.abs(step - (stairs.yc!));\r\n            draw_line(context, position - stairs.down[distance], step, position + stairs.down[distance], step, color);\r\n        });\r\n    } else if (stairs.yc) {\r\n        const position = stairs.yc;\r\n        stairs.list.forEach((step: number) => {\r\n            const distance = Math.abs(step - (stairs.xc!));\r\n            draw_line(context, position - stairs.down[distance], step, position + stairs.down[distance], step, color);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Renders the entire dungeon on the canvas.\r\n * @param dungeonData - The dungeon data.\r\n * @param renderSettings - The rendering settings.\r\n * @param canvasContext - The canvas rendering context.\r\n */\r\nfunction renderDungeon(dungeonData: DungeonData, renderSettings: DungeonRenderSettings): void {\r\n    console.log(\"Rendering dungeon...\");\r\n    // Get the main canvas from renderSettings.base_layer\r\n    const mainCanvas = renderSettings.base_layer;\r\n    if (!(mainCanvas instanceof HTMLCanvasElement)) {\r\n        console.error(\"Invalid base_layer in renderSettings. Expected an HTMLCanvasElement.\");\r\n        return;\r\n    }\r\n\r\n    const mainContext = mainCanvas.getContext('2d');\r\n    if (!mainContext) {\r\n        console.error(\"Failed to get 2D context for main canvas.\");\r\n        return;\r\n    }\r\n\r\n    // // Step 1: Clear the canvas\r\n    // console.log(\"Clearing canvas...\");\r\n    // mainContext.fillStyle = '#000000'; // Black\r\n    // mainContext.fillRect(0, 0, mainCanvas.width, mainCanvas.height);\r\n    // console.log(\"Canvas cleared.\");\r\n\r\n    // Clear the main canvas\r\n    mainContext.clearRect(0, 0, mainCanvas.width, mainCanvas.height);\r\n\r\n    // Step 2: Draw the background and grid\r\n    console.log(\"Drawing background (and grid if defined)\");\r\n    drawBackground(renderSettings, mainContext);\r\n    if (renderSettings.grid) {\r\n        drawGrid(dungeonData, renderSettings, mainContext);\r\n    }\r\n\r\n    // Step 3: Draw rooms and corridors\r\n    console.log(\"Drawing rooms and corridors...\");\r\n    drawRooms(dungeonData, renderSettings, mainContext);\r\n\r\n    // Step 4: Draw walls and shading\r\n    console.log(\"Drawing walls and shading...\");\r\n    drawWallsAndShading(dungeonData, renderSettings, mainContext);\r\n\r\n    // Step 5: Draw doors\r\n    console.log(\"Drawing doors...\");\r\n    drawDoors(dungeonData, renderSettings, mainContext);\r\n\r\n    // Step 6: Draw labels (room IDs)\r\n    console.log(\"Drawing labels...\");\r\n    drawLabels(dungeonData, renderSettings, mainContext);\r\n\r\n    // Step 7: Draw stairs\r\n    console.log(\"Drawing stairs...\");\r\n    drawStairs(dungeonData, renderSettings, mainContext);\r\n\r\n    console.log(\"Dungeon rendering complete.\");\r\n}\r\n\r\n// Main entry point\r\nfunction generateNewDungeon(): DungeonData {\r\n    console.log(\"Starting to generate a new dungeon\");\r\n    let rndDungName = generate_text(\"Dungeon Name\");\r\n    console.log(\"Generated dungeon name:\", rndDungName);\r\n    $(\"#dungeon_name\").val(rndDungName); // Use .val() instead of .text() for input fields\r\n    let dungeonData: DungeonData = updateAndGenerateDungeon();\r\n    return dungeonData;\r\n}\r\n\r\nfunction updateAndGenerateDungeon(): DungeonData {\r\n    console.log(\"Updating and generating dungeon\");\r\n\r\n    // Retrieve user settings\r\n    const userSettings = getUserSettings();\r\n    console.log(\"Selected Dungeon Settings before generation:\", userSettings);\r\n\r\n    // Generate dungeon configuration\r\n    let dungeonData = generateDungeonDataConfig(userSettings);\r\n    console.log(\"Dungeon Config after generation:\", dungeonData);\r\n\r\n    // Generate rooms\r\n    const roomConfig: RoomConfig = {\r\n        size: userSettings.room_size,\r\n        huge_rooms: userSettings.room_layout === 'dense' // Example logic for huge rooms\r\n    };\r\n    dungeonData = generateNewRooms(dungeonData, userSettings, roomConfig);\r\n    console.log(\"DungeonData after generating rooms:\", dungeonData);\r\n\r\n    // Generate doors\r\n    dungeonData = generateDoors(dungeonData);\r\n    console.log(\"DungeonData after generating doors:\", dungeonData);\r\n\r\n    // Generate corridors\r\n    dungeonData = generateCorridors(dungeonData);\r\n    console.log(\"DungeonData after generating corridors:\", dungeonData);\r\n\r\n    // Label rooms\r\n    dungeonData = labelRooms(dungeonData);\r\n    console.log(\"DungeonData after labeling rooms:\", dungeonData);\r\n\r\n    // Generate stairs\r\n    dungeonData = generateStairs(dungeonData, userSettings);\r\n    console.log(\"DungeonData after generating stairs:\", dungeonData);\r\n\r\n    console.log(\"Stair generation complete.\");\r\n    printDungeon(dungeonData); // Print the dungeon grid after stair generation\r\n\r\n    if (\"stair\" in dungeonData)\r\n        console.warn(\"Stairs \" + (dungeonData.stair as []).length);\r\n\r\n    // Remove dead ends\r\n    dungeonData = removeDeadEnds(dungeonData, userSettings.remove_deadends, userSettings.corridor_layout);\r\n    console.log(\"DungeonData after removing dead ends:\", dungeonData);\r\n    printDungeon(dungeonData); // Print the dungeon grid after removing dead ends\r\n\r\n\r\n\r\n    // Finalize the dungeon layout\r\n    dungeonData = finalizeDungeonLayout(dungeonData);\r\n    console.log(\"Dungeon Config after finalizing layout:\", dungeonData);\r\n    printDungeon(dungeonData); // Print the dungeon grid after finalizing layout\r\n\r\n    // Generate render settings\r\n    const renderSettings = generateRenderSettings(dungeonData, userSettings);\r\n    console.log(\"Render settings generated:\", renderSettings);\r\n\r\n    // Render the dungeon\r\n    renderDungeon(dungeonData, renderSettings);\r\n    console.log('Render the dungeon should be complete now');\r\n\r\n    return dungeonData;\r\n}\r\n\r\nfunction generateRenderSettings(dungeonData: DungeonData, selectedSettings: UserSettings): DungeonRenderSettings {\r\n    const dcCellSize = dungeonData.cell_size || 18;\r\n\r\n    // Ensure the canvas element exists\r\n    const baseLayer = document.getElementById(\"map\") as HTMLCanvasElement;\r\n    if (!baseLayer) {\r\n        throw new Error(\"Canvas element with ID 'map' not found.\");\r\n    }\r\n    let width = (dungeonData.n_cols + 1) * dcCellSize + 1;\r\n    let height = (dungeonData.n_rows + 1) * dcCellSize + 1;\r\n    let max_x = (dungeonData.n_cols + 1) * dcCellSize;\r\n    let max_y = (dungeonData.n_rows + 1) * dcCellSize;\r\n    let font = Math.floor(0.75 * dcCellSize).toString() + 'px sans-serif';\r\n    let grid = selectedSettings.grid !== 'none'; // Enable grid if not 'none'\r\n    baseLayer.width = width;\r\n    baseLayer.height = height;\r\n\r\n    // Generate the palette based on the selected map style\r\n    const palette = generatePalette(selectedSettings.map_style);\r\n\r\n    const renderSettings: DungeonRenderSettings = {\r\n        mapStyle: selectedSettings.map_style,\r\n        gridStyle: selectedSettings.grid,\r\n        cellSize: dcCellSize,\r\n        // width: width,\r\n        // height: height,\r\n        max_x: max_x,\r\n        max_y: max_y,\r\n        font: font,\r\n        cell_size: dcCellSize,\r\n        palette: palette,\r\n        grid: grid,\r\n        base_layer: baseLayer,\r\n    };\r\n\r\n    return renderSettings;\r\n}\r\n\r\nfunction saveDungeon() {\r\n    let savDungName = $(\"#dungeon_name\").val();\r\n    save_canvas($(\"map\") as any, `${savDungName}.png`);\r\n}\r\n\r\n// Event listeners\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    // Populate the dropdowns\r\n    initializeDropdowns();\r\n\r\n    // Generate the initial dungeon\r\n    const userSettings = getUserSettings();\r\n    let dungeonData = generateDungeonDataConfig(userSettings);\r\n    // Generate the initial dungeon\r\n    generateNewDungeon();\r\n\r\n    // Event listeners for dungeon name input and \"New\" button\r\n    $(\"#dungeon_name\").on(\"change\", () => {\r\n        console.log(\"Dungeon name changed:\", $(\"#dungeon_name\").val());\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#new_name\").on(\"click\", () => {\r\n        console.log(\"New name button clicked\");\r\n        resetRoomIdCounter(); // start from 1 for each new generation of rooms, affects labeling\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    // Event listeners for other settings to trigger dungeon regeneration\r\n    $(\"#map_style\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#grid\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#dungeon_layout\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#dungeon_size\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#add_stairs\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#room_layout\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#room_size\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#doors\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#corridor_layout\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    $(\"#remove_deadends\").on(\"change\", () => {\r\n        const userSettings = getUserSettings();\r\n        dungeonData = generateDungeonDataConfig(userSettings);\r\n        generateNewDungeon();\r\n    });\r\n\r\n    // Event listeners for saving and printing the dungeon\r\n    $(\"#save_map\").on(\"click\", saveDungeon);\r\n    // $(\"#print_map\").on(\"click\", () => {\r\n    //     window.print();\r\n    // });\r\n});\r\n\r\nlet roomIdCounter = 0; // Add a global counter for room IDs\r\n\r\n// Function to reset the room ID counter\r\nfunction resetRoomIdCounter() {\r\n    roomIdCounter = 0;\r\n}\r\n\r\nfunction createRoom(\r\n    dungeonData: DungeonData,\r\n    roomConfig: RoomConfig,\r\n    roomParams: { i?: number; j?: number; size?: string; height?: number; width?: number; complex_id?: number }\r\n): DungeonData {\r\n    if (dungeonData.n_rooms === 999) {\r\n        return dungeonData; // Maximum number of rooms reached\r\n    }\r\n\r\n    const f = roomParams || {};\r\n    let size = roomParams.size || roomConfig.size;\r\n    console.log(`Creating room with size: ${size}`);\r\n\r\n    const d = DungeonSettings.room_size[size!];\r\n    if (!d) {\r\n        console.error(`Room size configuration not found for size: ${size}`);\r\n        return dungeonData;\r\n    }\r\n\r\n    const g = d.size || 2;\r\n    const width = d.radix || 5;\r\n\r\n    // Ensure height is defined\r\n    if (!('height' in roomParams)) {\r\n        if ('i' in roomParams) {\r\n            let c = dungeonData.n_i - g - roomParams.i!;\r\n            if (c < 0) c = 0;\r\n            roomParams.height = Math.floor(Math.random() * (c < width ? c : width)) + g;\r\n        } else {\r\n            roomParams.height = Math.floor(Math.random() * width) + g;\r\n        }\r\n    }\r\n\r\n    // Ensure width is defined\r\n    if (!('width' in roomParams)) {\r\n        if ('j' in roomParams) {\r\n            let c = dungeonData.n_j - g - roomParams.j!;\r\n            if (c < 0) c = 0;\r\n            roomParams.width = Math.floor(Math.random() * (c < width ? c : width)) + g;\r\n        } else {\r\n            roomParams.width = Math.floor(Math.random() * width) + g;\r\n        }\r\n    }\r\n\r\n    // Ensure i is defined\r\n    if (!('i' in roomParams)) {\r\n        roomParams.i = Math.floor(Math.random() * (dungeonData.n_i - roomParams.height!));\r\n    }\r\n\r\n    // Ensure j is defined\r\n    if (!('j' in roomParams)) {\r\n        roomParams.j = Math.floor(Math.random() * (dungeonData.n_j - roomParams.width!));\r\n    }\r\n\r\n    const { i, j, height, width: roomWidth } = roomParams;\r\n    const bStart = 2 * i! + 1;\r\n    const gStart = 2 * j! + 1;\r\n    const dEnd = 2 * (i! + height!) - 1;\r\n    const cEnd = 2 * (j! + roomWidth!) - 1;\r\n\r\n    if (bStart < 1 || dEnd > dungeonData.max_row || gStart < 1 || cEnd > dungeonData.max_col) {\r\n        return dungeonData; // Room is out of bounds\r\n    }\r\n\r\n    let k: { [key: number]: number } | { blocked: number } = {};\r\n    for (let row = bStart; row <= dEnd; row++) {\r\n        for (let col = gStart; col <= cEnd; col++) {\r\n            if (dungeonData.cell[row][col] & 1) {\r\n                k = { blocked: 1 };\r\n                break;\r\n            }\r\n            if (dungeonData.cell[row][col] & 2) {\r\n                const roomId = (dungeonData.cell[row][col] & 65472) >> 6; // Decode room number\r\n                if (!('blocked' in k)) {\r\n                    k[roomId] = (k[roomId] || 0) + 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if ('blocked' in k && k.blocked) {\r\n        return dungeonData; // Room overlaps with a wall\r\n    }\r\n\r\n    const keys = Object.keys(k);\r\n    let roomId;\r\n    if (keys.length === 0) {\r\n        roomId = dungeonData.n_rooms + 1; // Room IDs start from 1\r\n        dungeonData.n_rooms = roomId; // Increment n_rooms\r\n    } else if (keys.length === 1) {\r\n        if (roomConfig.huge_rooms) {\r\n            if (parseInt(keys[0], 10) !== roomParams.complex_id) {\r\n                return dungeonData; // Complex room ID mismatch\r\n            }\r\n        } else {\r\n            return dungeonData; // Room overlaps with another room\r\n        }\r\n        roomId = parseInt(keys[0], 10);\r\n    } else {\r\n        return dungeonData; // Room overlaps with multiple rooms\r\n    }\r\n\r\n    if (roomId <= 0) {\r\n        console.error(`Invalid roomId: ${roomId}. Defaulting to 1.`);\r\n        roomId = 1;\r\n    }\r\n\r\n    for (let row = bStart; row <= dEnd; row++) {\r\n        for (let col = gStart; col <= cEnd; col++) {\r\n            dungeonData.cell[row][col] = 2 | (roomId << 6); // room encoding - per js lets keep this final\r\n            console.log(`Room ID: ${roomId}, Encoded Value: ${dungeonData.cell[row][col]}`); // Debugging\r\n        }\r\n    }\r\n\r\n    const newRoom: Room = {\r\n        id: roomId,\r\n        size: size!,\r\n        row: bStart,\r\n        col: gStart,\r\n        north: bStart,\r\n        south: dEnd,\r\n        west: gStart,\r\n        east: cEnd,\r\n        height: 10 * (dEnd - bStart + 1),\r\n        width: 10 * (cEnd - gStart + 1),\r\n        door: {\r\n            north: [],\r\n            south: [],\r\n            west: [],\r\n            east: [],\r\n        },\r\n        complex: [], // Initialize complex as an empty array\r\n    };\r\n\r\n    // Add walls around the room\r\n    for (let row = newRoom.north - 1; row <= newRoom.south + 1; row++) {\r\n        for (let col = newRoom.west - 1; col <= newRoom.east + 1; col++) {\r\n            // Check if the cell is on the perimeter of the room\r\n            if (row === newRoom.north - 1 || row === newRoom.south + 1 || col === newRoom.west - 1 || col === newRoom.east + 1) {\r\n                if (!(dungeonData.cell[row][col] & 6)) { // must be empty\r\n                    dungeonData.cell[row][col] |= 16; // Mark as wall\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (dungeonData.room[roomId]) {\r\n        if (dungeonData.room[roomId].complex) {\r\n            dungeonData.room[roomId].complex!.push(newRoom);\r\n        } else {\r\n            dungeonData.room[roomId] = Object.assign(Object.assign({}, dungeonData.room[roomId]), { complex: [dungeonData.room[roomId], newRoom] });\r\n        }\r\n    } else {\r\n        dungeonData.room[roomId] = newRoom; // Add the new room\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nexport function attemptDoorPlacement(a: DungeonData, b: Room): DoorPosition[] {\r\n    const doors: DoorPosition[] = [];\r\n\r\n    // Handle complex rooms\r\n    if (b.complex && Array.isArray(b.complex)) {\r\n        b.complex.forEach(subRoom => {\r\n            const subRoomDoors = attemptDoorPlacement(a, subRoom);\r\n            if (subRoomDoors.length > 0) {\r\n                doors.push(...subRoomDoors);\r\n            }\r\n        });\r\n    }\r\n\r\n    const { north, south, west, east } = b;\r\n\r\n    // Check each side of the room for adjacent rooms\r\n    if (north >= 3) {\r\n        for (let col = west; col <= east; col += 2) {\r\n            const door = calculateDoor(a, b, north, col, 'north');\r\n            if (door) doors.push(door);\r\n        }\r\n    }\r\n    if (south <= a.n_rows - 3) {\r\n        for (let col = west; col <= east; col += 2) {\r\n            const door = calculateDoor(a, b, south, col, 'south');\r\n            if (door) doors.push(door);\r\n        }\r\n    }\r\n    if (west >= 3) {\r\n        for (let row = north; row <= south; row += 2) {\r\n            const door = calculateDoor(a, b, row, west, 'west');\r\n            if (door) doors.push(door);\r\n        }\r\n    }\r\n    if (east <= a.n_cols - 3) {\r\n        for (let row = north; row <= south; row += 2) {\r\n            const door = calculateDoor(a, b, row, east, 'east');\r\n            if (door) doors.push(door);\r\n        }\r\n    }\r\n\r\n    return doors;\r\n}\r\n\r\nfunction calculateDoor(a: DungeonData, b: Room, row: number, col: number, dir: string): DoorPosition | null {\r\n    const doorRow = row + P[dir];\r\n    const doorCol = col + M[dir];\r\n\r\n    // Check if the door cell is within bounds\r\n    if (doorRow < 0 || doorRow > a.n_rows || doorCol < 0 || doorCol > a.n_cols) {\r\n        return null;\r\n    }\r\n\r\n    const cellValue = a.cell[doorRow][doorCol];\r\n\r\n    // Check if the cell is a wall and not already a door or stair\r\n    if (!(cellValue & 16) || (cellValue & 4128769)) { // parens important here\r\n        return null;\r\n    }\r\n\r\n    // Check the adjacent cell (inside the room)\r\n    const adjacentRow = doorRow + P[dir];\r\n    const adjacentCol = doorCol + M[dir];\r\n\r\n    if (adjacentRow < 0 || adjacentRow > a.n_rows || adjacentCol < 0 || adjacentCol > a.n_cols) {\r\n        return null;\r\n    }\r\n\r\n    const adjacentCell = a.cell[adjacentRow][adjacentCol];\r\n\r\n    // Ensure the adjacent cell is not a wall\r\n    if (adjacentCell & 1) {\r\n        return null;\r\n    }\r\n\r\n    // Check if the door connects to itself\r\n    const adjacentRoomId = (adjacentCell & 2) ? (adjacentCell & 65472) >> 6 : null; // decode room number\r\n    if (adjacentRoomId === b.id) {\r\n        return null; // Reject if the door connects to the same room\r\n    }\r\n\r\n    // Assign out_id based on the adjacent cell\r\n    const myout = (adjacentCell & 2) ? ((adjacentCell & 65472) >> 6) : undefined; // parens important here -  decode room number - default to undefined for empty spaces\r\n\r\n    return {\r\n        sill_r: row,\r\n        sill_c: col,\r\n        dir: dir,\r\n        door_r: doorRow,\r\n        door_c: doorCol,\r\n        out_id: myout, // outid or undefined if empty\r\n    };\r\n}\r\n\r\n/**\r\n * Calculates the total number of rooms to generate based on dungeon size and room configuration.\r\n * @param dungeonData - The current dungeon configuration.\r\n * @param roomSize - The size of the rooms (e.g., 'small', 'medium', 'large').\r\n * @param roomLayout - The layout of the rooms (e.g., 'sparse', 'scattered', 'dense').\r\n * @returns The total number of rooms to generate.\r\n */\r\nexport function calculateRoomDimensions(\r\n    dungeonData: DungeonData,\r\n    roomSize: string, // Room size (e.g., 'small', 'medium', 'large')\r\n    roomLayout: string // Room layout (e.g., 'sparse', 'scattered', 'dense')\r\n): number {\r\n    // Look up room size configuration\r\n    const sizeConfig = DungeonSettings.room_size[roomSize];\r\n    if (!sizeConfig) {\r\n        console.error(`Invalid room size: ${roomSize}`);\r\n        return 0;\r\n    }\r\n\r\n    // Calculate room dimensions based on size\r\n    const roomArea = (sizeConfig.size || 2) + (sizeConfig.radix || 5) + 1;\r\n    let totalRooms = 2 * Math.floor((dungeonData.n_cols * dungeonData.n_rows) / (roomArea * roomArea));\r\n\r\n    // Adjust room count based on layout\r\n    if (roomLayout === 'sparse') {\r\n        totalRooms /= 13; // Sparse layout has fewer rooms\r\n    }\r\n\r\n    return totalRooms;\r\n}\r\n\r\nexport function extractDoorPositions(dungeonData: DungeonData, room: Room): DoorPosition[] {\r\n    const doorPositions: DoorPosition[] = [];\r\n    console.log(\"Room passed to extractDoorPositions:\", room)\r\n    // Iterate through the doors of the room\r\n    for (const direction of Object.keys(room.door)) {\r\n        for (const door of room.door[direction]) {\r\n\r\n            doorPositions.push({\r\n                door_r: door.row,\r\n                door_c: door.col,\r\n                out_id: door.out_id,\r\n            });\r\n        }\r\n    }\r\n\r\n    return doorPositions;\r\n}\r\n\r\n/**\r\n * Generates new rooms for the dungeon based on the given configuration.\r\n * @param dungeonData - The current dungeon configuration.\r\n * @param userSettings - The user's settings for dungeon generation.\r\n * @param roomConfig - The configuration for the rooms to be generated.\r\n * @returns The updated dungeon configuration with new rooms.\r\n */\r\nfunction generateNewRooms(dungeonData: DungeonData, userSettings: UserSettings, roomConfig: RoomConfig): DungeonData {\r\n    const doorConnections: { [key: string]: number } = {};\r\n\r\n    // Calculate the total number of rooms to generate\r\n    const roomCount = calculateRoomDimensions(dungeonData, roomConfig.size || 'medium', userSettings.room_layout);\r\n\r\n    // Generate rooms using a loop\r\n    for (let i = 0; i < roomCount; i++) {\r\n        let validPlacement = false;\r\n        let attempts = 0;\r\n\r\n        while (!validPlacement && attempts < 100) {\r\n            const newRoomConfig = {\r\n                size: roomConfig.size || 'medium', // Default to 'medium' if size is not provided\r\n                i: random(dungeonData.n_i), // Random row position\r\n                j: random(dungeonData.n_j), // Random column position\r\n            };\r\n\r\n            // Calculate room dimensions based on size\r\n            const roomSize = lookupAtIndex(\"room_size\", newRoomConfig.size);\r\n            const roomHeight = roomSize.size || 2; // Default height if not specified\r\n            const roomWidth = roomSize.radix || 5; // Default width if not specified\r\n\r\n            // Check if the room fits within the dungeon boundaries\r\n            if (newRoomConfig.i + roomHeight > dungeonData.n_i || newRoomConfig.j + roomWidth > dungeonData.n_j) {\r\n                attempts++;\r\n                continue; // Skip this placement if the room doesn't fit\r\n            }\r\n\r\n            // Check for overlaps with existing rooms or corridors\r\n            let overlap = false;\r\n            for (let row = newRoomConfig.i; row < newRoomConfig.i + roomHeight; row++) {\r\n                for (let col = newRoomConfig.j; col < newRoomConfig.j + roomWidth; col++) {\r\n                    if (dungeonData.cell[row][col] & 2) { // Check if the cell is already part of a room\r\n                        overlap = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (overlap) break;\r\n            }\r\n\r\n            if (!overlap) {\r\n                validPlacement = true;\r\n                dungeonData = createRoom(dungeonData, roomConfig, newRoomConfig); // Pass roomConfig and newRoomConfig\r\n                console.log(`Created room at (${newRoomConfig.i}, ${newRoomConfig.j}) with size: ${newRoomConfig.size}`);\r\n            }\r\n\r\n            attempts++;\r\n        }\r\n    }\r\n\r\n    // Handle huge rooms if necessary\r\n    if (roomConfig.huge_rooms) {\r\n        const hugeRoomCount = calculateRoomDimensions(dungeonData, 'medium', userSettings.room_layout);\r\n        for (let i = 0; i < hugeRoomCount; i++) {\r\n            dungeonData = createRoom(dungeonData, roomConfig, { size: 'medium' }); // Pass size: 'medium' to createRoom\r\n        }\r\n    }\r\n\r\n    return dungeonData;\r\n}\r\n\r\nclass Trace {\r\n    var: { [key: string]: any } = {};\r\n    exclude: { [key: string]: boolean } = {};\r\n    comma?: string;\r\n\r\n    constructor() { }\r\n\r\n    setVariable(name: string, value: any) {\r\n        this.var[name] = value;\r\n    }\r\n\r\n    getVariable(name: string): any {\r\n        return this.var[name];\r\n    }\r\n}\r\n\r\n/**\r\n * Places a door in the dungeon.\r\n * @param dungeonData - The current dungeon configuration.\r\n * @param room - The room where the door is being placed.\r\n * @param doorConfig - The configuration for the door.\r\n * @returns The updated dungeon configuration with the new door.\r\n */\r\nexport function da(dungeonData: DungeonData, room: Room, doorConfig: {\r\n    doorRowIndex: number; // Row index of the door cell\r\n    doorColIndex: number; // Column index of the door cell\r\n    sill_r: number;       // Row index of the door sill (adjacent wall)\r\n    sill_c: number;       // Column index of the door sill (adjacent wall)\r\n    dir: string;          // Direction of the door (north, south, east, west)\r\n    out_id?: number;      // Optional: ID of the connected room\r\n    door_type: string;    // Type of door (e.g., 'standard', 'secure')\r\n}): DungeonData {\r\n    console.log(\"Adding door to room:\", room.id, doorConfig);\r\n\r\n    // Validate the door configuration\r\n    if (!doorConfig || !doorConfig.door_type) {\r\n        console.error(\"Invalid doorConfig:\", doorConfig);\r\n        return dungeonData;\r\n    }\r\n\r\n    // Check for invalid out_id (0 is not a valid room ID)\r\n    if (doorConfig.out_id === 0) {\r\n        //console.warn(`Invalid out_id (0) for door at (${doorConfig.doorRowIndex}, ${doorConfig.doorColIndex}).`);\r\n        return dungeonData;\r\n    }\r\n\r\n    // Retrieve the door type configuration from DungeonSettings\r\n    const doorTypeConfig = DungeonSettings.doors[doorConfig.door_type];\r\n    if (!doorTypeConfig || !doorTypeConfig.table) {\r\n        console.error(\"Invalid door type configuration:\", doorTypeConfig);\r\n        return dungeonData;\r\n    }\r\n\r\n    // Randomly select a door type from the configuration table\r\n    const selectedDoor = select_from_table(doorTypeConfig.table);\r\n    const doorEntry: Door = { row: doorConfig.doorRowIndex, col: doorConfig.doorColIndex, key: '', type: '' };\r\n\r\n    // Map door flags to their corresponding types\r\n    const doorTypes = {\r\n        65536: { key: 'arch', type: 'Archway' },\r\n        131072: { key: 'open', type: 'Unlocked Door' },\r\n        262144: { key: 'lock', type: 'Locked Door' },\r\n        524288: { key: 'trap', type: 'Trapped Door' },\r\n        1048576: { key: 'secret', type: 'Secret Door' },\r\n        2097152: { key: 'portc', type: 'Portcullis' }\r\n    };\r\n\r\n    // Determine the door type based on the selected flag\r\n    const doorType = doorTypes[selectedDoor as keyof typeof doorTypes];\r\n    if (!(dungeonData.cell[doorConfig.doorRowIndex][doorConfig.doorColIndex] & 4128769) && doorType) {\r\n        // Mark the cell as a door by setting the appropriate flag\r\n        dungeonData.cell[doorConfig.doorRowIndex][doorConfig.doorColIndex] |= selectedDoor | (room.id << 6); // room encoding per js - keep\r\n        doorEntry.key = doorType.key;\r\n        doorEntry.type = doorType.type;\r\n    } else {\r\n        console.error(\"Invalid door placement: cell already occupied or invalid door type.\");\r\n        return dungeonData;\r\n    }\r\n\r\n    // If the door connects to another room, set the out_id\r\n    if (doorConfig.out_id !== undefined) {\r\n        doorEntry.out_id = doorConfig.out_id;\r\n    }\r\n\r\n    // Ensure the direction key exists in the room.door object\r\n    if (!room.door[doorConfig.dir]) {\r\n        room.door[doorConfig.dir] = [];\r\n    }\r\n\r\n    // Add the door to the room's door list for the specified direction\r\n    room.door[doorConfig.dir].push(doorEntry);\r\n    room.last_door = doorEntry;\r\n\r\n    // Explicitly update the room in dungeonData.room\r\n    dungeonData.room[room.id] = room;\r\n\r\n    // Log the door placement details for debugging\r\n    console.log(`Placed door at (${doorConfig.doorRowIndex}, ${doorConfig.doorColIndex}) with type: ${doorEntry.type}`);\r\n    console.log(\"Door configuration:\", doorConfig);\r\n    console.log(\"Selected door type:\", selectedDoor);\r\n\r\n    return dungeonData;\r\n}\r\n\r\nexport function scale_table(a: GenData): number {\r\n    let c = 0;\r\n    for (let b in a) {\r\n        let d = key_range(b);\r\n        d[1] > c && (c = d[1]);\r\n    }\r\n    return c;\r\n}\r\n\r\nexport function key_range(a: string): [number, number] {\r\n    let c: RegExpExecArray | null;\r\n    return (c = /(\\d+)-00/.exec(a)) ? [parseInt(c[1], 10), 100] :\r\n        (c = /(\\d+)-(\\d+)/.exec(a)) ? [parseInt(c[1], 10), parseInt(c[2], 10)] :\r\n            '00' == a ? [100, 100] : [parseInt(a, 10), parseInt(a, 10)];\r\n}\r\n"],"names":["random","scale_table","key_range"],"mappings":"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","x_google_ignoreList":[0]}